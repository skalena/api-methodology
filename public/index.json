[
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/api-design-guidelines/",
	"title": "API Design Guidelines",
	"tags": [],
	"description": "",
	"content": " This original content was originated published at: https://github.com/paypal/api-standards/blob/master/api-style-guide.md Thanks PayPal for such great reference, that can help many developer around the world.\n Introduction The PayPal platform is a collection of reusable services that encapsulate well-defined business capabilities. Developers are encouraged to access these capabilities through Application Programming Interfaces (APIs) that enable consistent design patterns and principles. This facilitates a great developer experience and the ability to quickly compose complex business processes by combining multiple, complementary capabilities as building blocks.\nPayPal APIs follow the RESTful architectural style as much as possible. To support our objectives, we have developed a set of rules, standards, and conventions that apply to the design of RESTful APIs. These have been used to help design and maintain hundreds of APIs and have evolved over several years to meet the needs of a wide variety of use cases.\nWe are sharing these guidelines to help propagate good API design practices in general. We have pulled extensively from the broader community and believe that it is important to give back. The documentation is as generic as possible to make it easier to incorporate into the guidelines you use in your projects. If you have any updates, suggestions, or additions that you would like to contribute, please feel free to submit a PR or create an issue.\nDocument Semantics, Formatting, and Naming The keywords \u0026ldquo;MUST\u0026rdquo;, \u0026ldquo;MUST NOT\u0026rdquo;, \u0026ldquo;REQUIRED\u0026rdquo;, \u0026ldquo;SHALL\u0026rdquo;, \u0026ldquo;SHALL NOT\u0026rdquo;, \u0026ldquo;SHOULD\u0026rdquo;, \u0026ldquo;SHOULD NOT\u0026rdquo;, \u0026ldquo;RECOMMENDED\u0026rdquo;, \u0026ldquo;MAY\u0026rdquo;, and \u0026ldquo;OPTIONAL\u0026rdquo; in this document are to be interpreted as described in RFC 2119.\nThe words \u0026ldquo;REST\u0026rdquo; and \u0026ldquo;RESTful\u0026rdquo; MUST be written as presented here, representing the acronym as all upper-case letters. This is also true of \u0026ldquo;JSON,\u0026rdquo; \u0026ldquo;XML,\u0026rdquo; and other acronyms.\nMachine-readable text, such as URLs, HTTP verbs, and source code, are represented using a fixed-width font.\nURIs containing variable blocks are specified according to URI Template RFC 6570. For example, a URL containing a variable called account_id would be shown as https://foo.com/accounts/{account_id}/.\nHTTP headers are written in camelCase + hyphenated syntax, e.g. Foo-Request-Id.\nContributors Sanjay Dalal (former member: PayPal API Platform), Jason Harmon (former member: PayPal API Platform), Erik Hogan (PayPal API Platform), Jayadeba Jena (PayPal API Platform), Nikhil Kolekar (PayPal API Platform), Gagan Maheshwari (former member: PayPal API Platform), Michael McKenna (PayPal Globalization), George Petkov (former member: PayPal API Platform) and Andrew Todd (PayPal Credit).\nTable Of Contents  Interpreting the Guidelines  Terms Used   Service Design Principles  Loose Coupling Encapsulation Stability Reusable Contract-based Consistency Ease of Use Externalizable   HTTP Methods, Headers and Statuses  Data Resources/HTTP Methods  Business Capabilities and Resource Modeling HTTP Methods Processing   HTTP Headers  Assumptions HTTP Standard Headers HTTP Custom Headers HTTP Header Propagation   HTTP Status Codes  Status Code Ranges Status Reporting Allowed Status Codes List HTTP Method to Status Code Mapping     Hypermedia  HATEOAS Hypermedia Compliant API Link Description Object Links Array Link Relation Type Use Cases   Naming Conventions  URI Component Names Field Names Enum Names Link Relation Names File Names   URI  Resource Path Query Parameters   JSON Schema  API Contract Description $schema Migration From draft-03 Advanced Syntax draft-04   JSON Types  JSON Primitive Types  String Enumeration Number Array Null Additional Properties   Common Types  Address Money   Percentage, Interest Rate, or APR  Internationalization Date,Time and Timezone Formats     Error Handling  Error Schema Error Samples Error Declaration In API Specification Samples With Error Scenarios In Documentation Error Catalog   API Versioning  API Lifecycle API Versioning Policy Backwards Compatibility End of Life Policy   Deprecation  Terms Used Background Requirements Solution   Patterns And Use Cases References  The key abstraction of information in REST is a resource. According to Fielding\u0026rsquo;s dissertation section 5.2, any information that can be named can be a resource: a document or image, a temporal service (e.g. \u0026ldquo;today\u0026rsquo;s weather in Los Angeles\u0026rdquo;), a collection of other resources, a non-virtual object (e.g. a person), and so on. A resource is a conceptual mapping to a set of entities, not the entity that corresponds to the mapping at any particular point in time. More precisely, a resource R is a temporally varying membership function MR(t), that for time t maps to a set of entities, or values, that are equivalent. The values in the set may be resource representations and/or resource identifiers.\nA resource can also map to the empty set, that allows references to be made to a concept before any realization of that concept exists.\nREST uses a resource identifier to identify the particular resource instance involved in an interaction between components. The naming authority (an organization providing APIs, for example) that assigned the resource identifier making it possible to reference the resource, is responsible for maintaining the semantic validity of the mapping over time (ensuring that the membership function does not change). - Fielding\u0026rsquo;s dissertation section 5.2\nREST components perform actions on a resource by using a representation to capture the current or intended state of that resource and by transferring that representation between components. A representation is a sequence of bytes, plus representation metadata to describe those bytes - Fielding dissertation section 5.2.\nAccording to Wikipedia, a domain model is a system of abstractions that describes selected aspects of a sphere of knowledge, influence, or activity. The concepts include the data involved in a business, and the rules that the business uses in relation to that data. As an example, the PayPal domain model includes domains such as Payment, Risk, Compliance, Identity, Customer Support, etc.\nCapability represents a business-oriented and customer-facing view of an organization\u0026rsquo;s business logic. Capabilities could be used to organize portfolio of APIs as a stable, business-driven view of its system, consumable by customers and experiences. Examples of capability are: Compliance, Credit, Identity, Retail and Risk, among other things.\nCapabilities drive the interface, while domains are more coarse-grained and closer to the code and the organization\u0026rsquo;s structure. Capability and domain are seen as orthogonal concerns from a service perspective.\nCapabilities drive service modeling and namespace concerns in an API portfolio. Namespaces are part of the Business Capability Model. Examples of namespace are: compliance, devices, transfers, credit, limits, etc.\nNamespaces should reflect the domain that logically groups a set of business capabilities. Domain definition should reflect the customer\u0026rsquo;s perspective on how platform capabilities are organized. Note that these may not necessarily reflect the company\u0026rsquo;s hierarchy, organization, or (existing) code structure. In some cases, domain definitions are aspirational, in the sense that these reflect the target, customer-oriented platform organization model. Underlying service implementations and organization structures may need to migrate to reflect these boundaries over time.\nServices provide a generic API for accessing and manipulating the value set of a resource, regardless of how the membership function is defined or the type of software that is handling the request. Services are generic pieces of software that can perform any number of functions. It is, therefore, instructive to think about the different types of services that exist.\nLogically, we can segment the services and the APIs that they expose into two categories:\n Capability APIs are public APIs exposed by services implementing generic, reusable business capabilities. Experience-specific APIs are built on top of capability APIs and expose functionality which may be either specific to a channel, or optimized for a context-specific specialization of a generic capability. Contextual information could be related to time, location, device, channel, identity, user, role, privilege level among other things.  Capability-based Services and APIs Capability APIs are public interfaces to reusable business capabilities. Public implies that these APIs are limited only to the interfaces meant for consumption by front-end experiences, external consumers, or internal consumers from a different domain.\nExperience-based Services and APIs Experience-specific services provide minimal additional business logic over core capabilities, and mainly provide transformation and lightweight orchestration to tailor an interaction to the needs of a specific experience, channel or device. Their input/output functionality is limited to service calls.\nAn entity that invokes an API request and consumes the API response.\nThis section captures the principles guiding the design of the services that expose APIs to internal and external developers, adjacencies, partners and affiliates. A service refers to functionality pertaining to a particular capability, exposed as an API.\nFollowing are the core design principles for a service.\nServices and consumers must be loosely coupled from each other.Coupling refers to a connection or relationship between two things. A measure of coupling is comparable to a level of dependency. This principle advocates the design of service contracts, with a constant emphasis on reducing (loosening) dependencies between the service contract, its implementation, and service consumers.\nThe principle of Loose Coupling promotes the independent design and evolution of a service’s logic and implementation while still emphasizing baseline interoperability with consumers that have come to rely on the service’s capabilities.\nThis principle implies the following:\n A service contract should not expose implementation details A service contract can evolve without impacting existing consumers A service in a particular domain can evolve independently of other domains  A domain service can access data and functionality it does not own through other service contracts only.A service exposes functionality that comprises the functionality and data it owns and implements, as well as the functionality and data it depends upon which it does not own. This principle advocates that any functionality or data that a service depends on and which it does not own must be accessed through service contracts only.\nThis principle implies the following:\n A service has a clear isolation boundary - a clear scope of ownership in terms of functionality and data A service cannot expose the data it does not own directly  Service contracts must be stable.Services must be designed in such a way that the contract they expose remains valid for existing customers. Should the service contract need to evolve in an incompatible fashion for the consumer, this should be communicated clearly.\nThis principle implies the following:\n Existing clients of a service must be supported for a documented period of time Additional functionality must be introduced in a way that does not impact existing consumers Deprecation and migration policies must be clearly stated to set consumers\u0026rsquo; expectations  Services must be developed to be reusable across multiple contexts and by multiple consumers.The main goal of an API platform is to enable applications to be developed quickly and cost effectively by using and combining services. This is possible only if the service contracts have been developed with flexibility for multiple use-cases and multiple consumers. This principle advocates that services be developed in a manner that enables them to be used by multiple consumers and in multiple contexts, some of which may evolve over time.\nThis principle implies the following:\n A service contract should be designed for not just the immediate context, but with support and/or extensibility to be used by multiple consumers in different contexts A service contract may need to incrementally evolve to support multiple contexts and consumers over time  Functionality and data must only be exposed through standardized service contracts.A service exposes its purpose and capabilities via a service contract. A service contract comprises of functional aspects, non-functional aspects (such as availability, response-time), and business aspects (such as cost-per-call, terms and conditions). Standardized means that the service contracts must be compliant with the contract design standards.\nThis principle advocates that all functionality and data must only be exposed through standardized service contracts. Consumers of services can, therefore, understand and access functionality and data only through service contracts.\nThis principle implies the following:\n Functionality and data cannot be understood or accessed outside of service contracts Each piece of data (such as that managed in a datastore) is owned by only one service  Services must follow a common set of rules, interaction styles, vocabulary and shared types.A set of rules prescribes the definition of services in order to expose those in a consistent manner. This principle increases the ease of use of the API platform by reducing the learning curve for consumers of new services.\nThis principle implies the following:\n A set of standards is defined for services to comply with A service should use vocabulary from common and shared dictionaries Compatible interaction styles, service granularity and shared types are key for full interoperability and ease of service compositions  Services must be easy to use and compose in consumers (and applications).A service that is difficult and time consuming to use reduces the benefits of a microservices architecture by encouraging consumers to find alternate mechanisms to access the same functionality. Composability means that services can be combined easily because the service contracts and access protocols are consistent, and each service contract does not have to be understood differently.\nThis principle implies the following:\n A service contract is easily discoverable and understandable Service contracts and protocols are consistent on all aspects that they can be - e.g. identification and authentication mechanisms, error semantics, common type usage, pagination, etc. A service has clear ownership, so that consumer providers can reach service owners regarding SLAs, requirements, issues A consumer provider can easily integrate, test, and deploy a consumer that uses this service A consumer provider can easily monitor the non-functional aspects of a service  Service must be designed so that the functionality it provides is easily externalizable.A service is developed for use by consumers that may be from another domain or team, another business unit or another company. In all of these cases, the functionality exposed is the same; what changes is the access mechanism or the policies enforced by a service, like authentication, authorization and rate-limiting. Since the functionality exposed is the same, the service should be designed once and then externalized based on business needs through appropriate policies.\nThis principle implies the following:\n The service interface must be derived from the domain model and the intended use-cases it is meant to support The service contract and access (binding) protocols supported must meet the consumer\u0026rsquo;s needs The externalization of a service must not require reimplementation, or a change in service contract  Various business capabilities of an organization are exposed through APIs as a set of resources. Functionality MUST not be duplicated across APIs; rather resources (e.g., user account, credit card, etc.) are expected to be re-used as needed across use-cases.\nMost services will fall easily into the standard data resource model where primary operations can be represented by the acronym CRUD (Create, Read, Update, and Delete). These map very well to standard HTTP verbs.\n   HTTP Method Description     GET To retrieve a resource.   POST To create a resource, or to execute a complex operation on a resource.   PUT To update a resource.   DELETE To delete a resource.   PATCH To perform a partial update to a resource.    The actual operation invoked MUST match the HTTP method semantics as defined in the table above.\n The GET method MUST NOT have side effects. It MUST NOT change the state of an underlying resource. POST: method SHOULD be used to create a new resource in a collection.  Example: To add a credit card on file, POST https://api.foo.com/v1/vault/credit-cards Idempotency semantics: If this is a subsequent execution of the same invocation (including the Foo-Request-Id header) and the resource was already created, then the request SHOULD be idempotent.   The POST method SHOULD be used to create a new sub-resource and establish its relationship with the main resource.  Example: To refund a payment with transaction ID 12345: POST https://api.foo.com/v1/payments/payments/12345/refund   The POST method MAY be used in complex operations, along with the name of the operation. This is also known as the controller pattern and is considered an exception to the RESTful model. It is more applicable in cases when resources represent a business process, and operations are the steps or actions to be performed as part of it. For more information, please refer to section 2.6 of the RESTful Web Services Cookbook. The PUT method SHOULD be used to update resource attributes or to establish a relationship from a resource to an existing sub-resource; it updates the main resource with a reference to the sub-resource.  It is assumed throughout these guidelines that request bodies and response bodies MUST be sent using JavaScript Object Notation (JSON). JSON is a light-weight data representation for an object composed of unordered key-value pairs. JSON can represent four primitive types (strings, numbers, booleans, and null) and two structured types (objects and arrays). When processing an API method call, the following guidelines SHOULD be followed.\nThe data model for representation MUST conform to the JSON Data Interchange Format as described in RFC 7159.\n Resource endpoints MUST support application/json as content type. If an Accept header is sent and application/json is not an acceptable response, a 406 Not Acceptable error MUST be returned.  APIs MUST be strict in the information they produce, and they SHOULD be strict in what they consume as well.\nSince we are dealing with programming interfaces, we need to avoid guessing the meaning of what is being sent to us as much as possible. Given that integration is typically a one-time task for a developer and we provide good documentation, we need to be strict with using the data that is being received. Postel\u0026rsquo;s law must be weighed against the many dangers of permissive parsing.\nThe purpose of HTTP headers is to provide metadata information about the body or the sender of the message in a uniform, standardized, and isolated way. HTTP header names are NOT case sensitive.\n HTTP headers SHOULD only be used for the purpose of handling cross-cutting concerns. API implementations SHOULD NOT introduce or depend on headers. Headers MUST NOT include API or domain specific values. If available, HTTP standard headers MUST be used instead of creating a custom header.  Service Consumers and Service Providers:\n SHOULD NOT expect that a particular HTTP header is available. It is possible that an intermediary component in call chain can drop an HTTP header. This is the reason business logic SHOULD NOT be based on HTTP headers. SHOULD NOT assume the value of a header has not been changed as part of HTTP message transmission.  Infrastructure Component (Web-services framework, Client invocation library, Enterprise Service Bus (ESB), Load Balancers (LB), etc. involved in HTTP message delivery):\n MAY return an error based on availability and validity of a particular header without transmitting the message forward. For example, an authentication or authorization error for a request based on client identity and credentials. MAY add, remove, or change a value of an HTTP header.  These are headers defined or referenced from HTTP/1.1 specification (RFC 7231). Their purpose, syntax, values, and semantics are well defined and understood by many infrastructure components.\n   HTTP Header Name Description     Accept This request header specifies the media types that the API client is capable of handling in the response. Systems issuing the HTTP request SHOULD send this header. Systems handling the request SHOULD NOT assume it is available. It is assumed throughout these API guidelines that APIs support application/json.   Accept-Charset This request header specifies what character sets the API client is capable of handling in the response.The value of Accept-Charset SHOULD include utf-8.   Content-Language This request/response header is used to specify the language of the content. The default locale is en-US. API clients SHOULD identify the language of the data using Content-Language header. APIs MUST provide this header in the response. Example: Content-Language: en-US   Content-Type This request/response header indicates the media type of the request or response body. API client MUST include with request if the request contains a body, e.g. it is a POST, PUT, or PATCH request.API developer MUST include it with response if a response body is included (not used with 204 responses).If the content is a text-based type, such as JSON, the Content-Type MUST include a character-set parameter. The character-set MUST be UTF-8.The only supported media type for now is application/json.Example:(in HTTP request) Accept: application/jsonAccept-Charset: utf-8(in HTTP response) Content-Type: application/json; charset=utf-8   Link According to Web Linking RFC 5988, a link is a typed connection between two resources that are identified by Internationalised Resource Identifiers (IRIs). The Link entity-header field provides a means for serializing one or more links in HTTP headers. APIs SHOULD be built with a design assumption that neither an API, nor an API client\u0026rsquo;s business logic should depend on information provided in the headers. Headers must only be used to carry cross-cutting concern information such as security, traceability, monitoring, etc. Therefore, usage of the Link header is prohibited with response codes 201 or 3xx. Consider using HATEOAS links in the response body instead.   Location This response-header field is used to redirect the recipient to a location other than the Request-URI for completion of the request or identification of a new resource. APIs SHOULD be built with a design assumption that neither an API, nor an API client\u0026rsquo;s business logic should depend on information provided in the headers. Headers must only be used to carry cross-cutting concern information such as security, traceability, monitoring, etc. Therefore, usage of the Location header is prohibited with response codes 201 or 3xx. Consider using HATEOAS links in response body instead.   Prefer The Prefer request header field is used to indicate that a particular server behavior(s) is preferred by the client but is not required for successful completion of the request. It is an end to end field and MUST be forwarded by a proxy if the request is forwarded unless Prefer is explicitly identified as being hop by hop using the Connection header field. Following token values are possible to use for APIs provided an API documentation explicitly indicates support for Prefer.respond-async: API client prefers that API server processes its request asynchronously. Prefer: respond-async Server returns a 202 (Accepted) response and processes the request asynchronously. API server could use a webhook to inform the client subsequently, or the client may call GET to get the response at a later time. Refer to Asynchronous Operations for more details.read-consistent: API client prefers that API server returns response from a durable store with consistent data. For APIs that are not offering any optimization preferences for their clients, this behavior would be the default and it would not require the client to set this token. Prefer: read-consistentread-eventual-consistent: API client prefers that API server returns response from either cache or presumably eventually consistent datastore if applicable. If there is a miss in finding the data from either of these two types of sources, the API server might return response from a consistent, durable datastore.Prefer: read-eventual-consistentread-cache: API client prefers that API server returns response from cache if available. If the cache hit is a miss, the server could return response from other sources such as eventual consistent datastore or a consistent, durable datastore.Prefer: read-cachereturn=representation: API client prefers that API server include an entity representing the current state of the resource in the response to a successful request. This preference is intended to provide a means of optimizing communication between the client and server by eliminating the need for a subsequent GET request to retrieve the current representation of the resource following a creation (POST) modification operation (PUT or PATCH).Prefer: return=representationreturn=minimal: API client indicates that the server returns only a minimal response to a successful request. The determination of what constitutes an appropriate \u0026ldquo;minimal\u0026rdquo; response is solely at the discretion of the server.Prefer: return=minimal    Following are some custom headers used in these guidelines. These are not part of the HTTP specifications.\n   HTTP Header Name Description     Foo-Request-Id API consumers MAY choose to send this header with a unique ID identifying the request header for tracking purpose. Such a header can be used internally for logging and tracking purpose too. It is RECOMMENDED to send this header back as a response header if response is synchronous or as request header of a webhook as applicable.    When services receive request headers, they MUST pass on relevant custom headers in addition to the HTTP standard headers in requests/messages dispatched to downstream applications.\nRESTful services use HTTP status codes to specify the outcomes of HTTP method execution. HTTP protocol specifies the outcome of a request execution using an integer and a message. The number is known as the status code and the message as the reason phrase. The reason phrase is a human readable message used to clarify the outcome of the response. HTTP protocol categorizes status codes in ranges.\nWhen responding to API requests, the following status code ranges MUST be used.\n   Range Meaning     2xx Successful execution. It is possible for a method execution to succeed in several ways. This status code specifies which way it succeeded.   4xx Usually these are problems with the request, the data in the request, invalid authentication or authorization, etc. In most cases the client can modify their request and resubmit.   5xx Server error: The server was not able to execute the method due to site outage or software defect. 5xx range status codes SHOULD NOT be utilized for validation or logical error handling.    Success and failure apply to the whole operation not just to the SOA framework portion or to the business logic portion of code exectuion.\nFollowing are the guidelines for status codes and reason phrases.\n Success MUST be reported with a status code in the 2xx range. HTTP status codes in the 2xx range MUST be returned only if the complete code execution path is successful. This includes any container/SOA framework code as well as the business logic code execution of the method. Failures MUST be reported in the 4xx or 5xx range. This is true for both system errors and application errors. There MUST be a consistent, JSON-formatted error response in the body as defined by the error.json schema. This schema is used to qualify the kind of error. Please refer to Error Handling guidelines for more details. A server returning a status code in the 4xx or 5xx range MUST return the error.json response body. A server returning a status code in the 2xx range MUST NOT return response following error.json, or any kind of error code, as part of the response body. For client errors in the 4xx code range, the reason phrase SHOULD provide enough information for the client to be able to determine what caused the error and how to fix it. For server errors in the 5xx code range, the reason phrase and an error response following error.json SHOULD limit the amount of information to avoid exposing internal service implementation details to clients. This is true for both external facing and internal APIs. Service developers should use logging and tracking utilities to provide additional information.  All REST APIs MUST use only the following status codes. Status codes in BOLD SHOULD be used by API developers. The rest are primarily intended for web-services framework developers reporting framework-level errors related to security, content negotiation, etc.\n APIs MUST NOT return a status code that is not defined in this table. APIs MAY return only some of status codes defined in this table.     Status Code Description     200 OK Generic successful execution.   201 Created Used as a response to POST method execution to indicate successful creation of a resource. If the resource was already created (by a previous execution of the same method, for example), then the server should return status code 200 OK.   202 Accepted Used for asynchronous method execution to specify the server has accepted the request and will execute it at a later time. For more details, please refer Asynchronous Operations.   204 No Content The server has successfully executed the method, but there is no entity body to return.   400 Bad Request The request could not be understood by the server. Use this status code to specify:The data as part of the payload cannot be converted to the underlying data type.The data is not in the expected data format.Required field is not available.Simple data validation type of error.   401 Unauthorized The request requires authentication and none was provided. Note the difference between this and 403 Forbidden.   403 Forbidden The client is not authorized to access the resource, although it may have valid credentials. API could use this code in case business level authorization fails. For example, accound holder does not have enough funds.   404 Not Found The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available. For example, it may be that no data exists in the database at that key.   405 Method Not Allowed The server has not implemented the requested HTTP method. This is typically default behavior for API frameworks.   406 Not Acceptable The server MUST return this status code when it cannot return the payload of the response using the media type requested by the client. For example, if the client sends an Accept: application/xml header, and the API can only generate application/json, the server MUST return 406.   415 Unsupported Media Type The server MUST return this status code when the media type of the request\u0026rsquo;s payload cannot be processed. For example, if the client sends a Content-Type: application/xml header, but the API can only accept application/json, the server MUST return 415.   422 Unprocessable Entity The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.   429 Too Many Requests The server must return this status code if the rate limit for the user, the application, or the token has exceeded a predefined value. Defined in Additional HTTP Status Codes RFC 6585.   500 Internal Server Error This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server. A 500 response indicates a server-side software defect or site outage. 500 SHOULD NOT be utilized for client validation or logic error handling.   503 Service Unavailable The server is unable to handle the request for a service due to temporary maintenance.    For each HTTP method, API developers SHOULD use only status codes marked as \u0026ldquo;X\u0026rdquo; in this table. If an API needs to return any of the status codes marked with an X, then the use case SHOULD be reviewed as part of API design review process and maturity level assessment. Most of these status codes are used to support very rare use cases.\n   Status Code 200 Success 201 Created 202 Accepted 204 No Content 400 Bad Request 404 Not Found 422 Unprocessable Entity 500 Internal Server Error     GET X    X X X X   POST X X X  X X X X   PUT X  X X X X X X   PATCH X   X X X X X   DELETE X   X X X X X      GET: The purpose of the GET method is to retrieve a resource. On success, a status code 200 and a response with the content of the resource is expected. In cases where resource collections are empty (0 items in /v1/namespace/resources), 200 is the appropriate status (resource will contain an empty items array). If a resource item is \u0026lsquo;soft deleted\u0026rsquo; in the underlying data, 200 is not appropriate (404 is correct) unless the \u0026lsquo;DELETED\u0026rsquo; status is intended to be exposed.\n  POST: The primary purpose of POST is to create a resource. If the resource did not exist and was created as part of the execution, then a status code 201 SHOULD be returned.\n It is expected that on a successful execution, a reference to the resource created (in the form of a link or resource identifier) is returned in the response body. Idempotency semantics: If this is a subsequent execution of the same invocation (including the Foo-Request-Id header) and the resource was already created, then a status code of 200 SHOULD be returned. For more details on idempotency in APIs, refer to idempotency. If a sub-resource is utilized (\u0026lsquo;controller\u0026rsquo; or data resource), and the primary resource identifier is non-existent, 404 is an appropriate response.    POST can also be used while utilizing the controller pattern, 200 is the appropriate status code.\n  PUT: This method SHOULD return status code 204 as there is no need to return any content in most cases as the request is to update a resource and it was successfully updated. The information from the request should not be echoed back.\n In rare cases, server generated values may need to be provided in the response, to optimize client flow (if the client necessarily has to perform a GET after PUT). In these cases, 200 and a response body are appropriate.    PATCH: This method should follow the same status/response semantics as PUT, 204 status and no response body.\n 200 + response body should be avoided at all costs, as PATCH performs partial updates, meaning multiple calls per resource is normal. As such, responding with the entire resource can result in large bandwidth usage, especially for bandwidth-sensitive mobile clients.    DELETE: This method SHOULD return status code 204 as there is no need to return any content in most cases as the request is to delete a resource and it was successfully deleted.\n As the DELETE method MUST be idempotent as well, it SHOULD still return 204, even if the resource was already deleted. Usually the API consumer does not care if the resource was deleted as part of this operation, or before. This is also the reason why 204 instead of 404 should be returned.    Hypermedia, an extension of the term hypertext, is a nonlinear medium of information which includes graphics, audio, video, plain text and hyperlinks according to wikipedia. Hypermedia As The Engine Of Application State (HATEOAS) is a constraint of the REST application architecture described by Roy Fielding in his dissertation.\nIn the context of RESTful APIs, a client could interact with a service entirely through hypermedia provided dynamically by the service. A hypermedia-driven service provides representation of resource(s) to its clients to navigate the API dynamically by including hypermedia links in the responses. This is different than other form of SOA, where servers and clients interact based on WSDL-based specification defined somewhere on the web or exchanged off-band.\nA hypermedia compliant API exposes a finite state machine of a service. Here, requests such as DELETE, PATCH, POST and PUT typically initiate a transition in state while responses indicate the change in the state. Lets take an example of an API that exposes a set of operations to manage a user account lifecycle and implements the HATEOAS interface constraint.\nA client starts interaction with a service through a fixed URI /users. This fixed URI supports both GET and POST operations. The client decides to do a POST operation to create a user in the system.\nRequest:\n POST https://api.foo.com/v1/customer/users { \u0026quot;given_name\u0026quot;: \u0026quot;James\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Greenwood\u0026quot;, ... } Response:\nThe API creates a new user from the input and returns the following links to the client in the response.\n A link to retrieve the complete representation of the user (aka self link) (GET). A link to update the user (PUT). A link to partially update the user (PATCH). A link to delete the user (DELETE).   { HTTP/1.1 201 CREATED Content-Type: application/json ... \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;delete\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;DELETE\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PUT\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;edit\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PATCH\u0026quot; } ] } A client can store these links in its database for later use.\nA client may then want to display a set of users and their details before the admin decides to delete one of the users. So the client does a GET to the same fixed URI /users.\nRequest:\nGET https://api.foo.com/v1/customer/users The API returns all the users in the system with respective self links.\nResponse:\n { \u0026quot;total_items\u0026quot;: \u0026quot;166\u0026quot;, \u0026quot;total_pages\u0026quot;: \u0026quot;83\u0026quot;, \u0026quot;users\u0026quot;: [ { \u0026quot;given_name\u0026quot;: \u0026quot;James\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Greenwood\u0026quot;, ... \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; } ] }, { \u0026quot;given_name\u0026quot;: \u0026quot;David\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Brown\u0026quot;, ... \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-MDFSKFGIFJ86DSF\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; } }, ... } The client MAY follow the self link of the user and figure out all the possible operations that it can perform on the user resource.\nRequest:\nGET https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI Response:\nHTTP/1.1 200 OK Content-Type: application/json { \u0026quot;given_name\u0026quot;: \u0026quot;James\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Greenwood\u0026quot;, ... \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;delete\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;DELETE\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PUT\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;edit\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PATCH\u0026quot; } } To delete the user, the client retrieves the URI of the link relation type delete from its data store and performs a delete operation on the URI.\nRequest:\nDELETE https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI In summary:\n There is a well defined entry point for an API which a client navigates to in order to access all other resources. The client does not need to build the logic of composing URIs to execute different requests or code any kind of business rule by looking into the response details (more in detail is described in the later sections) that may be associated with the URIs and state changes. The client acknowledges the fact that the process of creating URIs belongs to the server. Client treats URIs as opaque identifiers. APIs using hypermedia in representations could be extended seamlessly. As new methods are introduced, responses could be extended with relevant HATEOAS links. In this way, clients could take advantage of the functionality in incremental fashion. For example, if the API starts supporting a new PATCH operation then clients could use it to do partial updates.  The mere presence of links does not decouple a client from having to learn the data required to make requests for a transition and all associated link semantics, particularly for POST/PUT/PATCH operations. An API MUST provide documentation to clearly describe all the links, link relation types and request response formats for each of the URIs.\nSubsequent sections provide more details about the structure of a link and what different relationship types mean.\nLinks MUST be described using the [Link Description Object (LDO)] 4 schema. An LDO describes a single link relation in the links array. Following is brief description for properties of Link Description Object.\n  href:\n  A value for the href property MUST be provided.\n  The value of the href property MUST be a [URI template] 6 used to determine the target URI of the related resource. It SHOULD be resolved as a URI template per RFC 6570.\n  Use ONLY absolute URIs as a value for href property. Clients usually bookmark the absolute URI of a link relation type from the representation to make API requests later. Developers MUST use the URI Component Naming Conventions to construct absolute URIs. The value from the incoming Host header (e.g. api.foo.com) MUST be used as the host field of the absolute URI.\n    rel:\n  rel stands for relation as defined in Link Relation Type\n  The value of the rel property indicates the name of the relation to the target resource.\n  A value for the rel property MUST be provided.\n     method:\n The method property identifies the HTTP verb that MUST be used to make a request to the target of the link. The method property assumes a default value of GET if it is ommitted.    title:\n The title property provides a title for the link and is a helpful documentation tool to facilitate understanding by the end clients. This property is NOT REQUIRED.    Note that these API guidelines do not recommend using the HTTP Location header to provide a link. Also, they do not recommend using the Link header as described in JAX-RS. The scope of HTTP header is limited to point-to-point interaction between a client and a service. Since responses might be passed around to other layers and components on the client side which may not directly interact with the service, any information that is stored in a header may not be available. Therefore, we recommend returning Link Description Object(s) in HTTP response body.\nThe links array property of schemas is used to associate a Link Description Objects with a [JSON hyper-schema draft-04] 3 instance.\n This property MUST be an array. Items in the array must be of type Link Description Object.  Here\u0026rsquo;s an example of how you would describe links in the schema.\n A links array similar to the one defined in the sample JSON schema below MUST be provided as part of the API resource schema definition. Please note that the links array needs to be declared within the properties keyword of an object. This is required for code generators to add setter/getter methods for the links array in the generated object. All possible links that an API returns as part of the response MUST be declared in the response schema using a URI template. The links array of URI templates MUST be declared outside the properties keyword.  { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-04/hyper-schema#\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;A sample resource representing a customer name.\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Unique ID to identify a customer.\u0026quot; }, \u0026quot;first_name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Customer's first name.\u0026quot; }, \u0026quot;last_name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Customer's last name.\u0026quot; }, \u0026quot;links\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;, \u0026quot;items\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;http://json-schema.org/draft-04/hyper-schema#definitions/linkDescription\u0026quot; } } }, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/{id}\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/{id}\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;delete\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;DELETE\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/{id}\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PUT\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/{id}\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;edit\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PATCH\u0026quot; } ] } Below is an example response that is compliant with the above schema.\n{ \u0026quot;id\u0026quot;: \u0026quot;ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Doe\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/cusommer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/users/ALT-JFWXHGUV7VI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;edit\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;PATCH\u0026quot; } ] } A Link Relation Type serves as an identifier for a link. An API MUST assign a meaningful link relation type that unambiguously describes the semantics of the link. Clients use the relevant Link Relation Type in order to identify the link to use from a representation.\nWhen the semantics of a Link Relation Type defined in [IANA\u0026rsquo;s list of standardized link relations] 5 matches with the one you want to define, then it MUST be used. The table below describes some of the commonly used link relation types. It also lists some additional lin relation types defined by these guidelines.\n   Link Relation Type Description     self Conveys an identifier for the link\u0026rsquo;s context. Usually a link pointing to the resource itself.   create Refers to a link that can be used to create a new resource.   edit Refers to editing (or partially updating) the representation identified by the link. Use this to represent a PATCH operation link.   delete Refers to deleting a resource identified by the link. Use this Extended link relation type to represent a DELETE operation link.   replace Refers to completely update (or replace) the representation identified by the link. Use this Extended link relation type to represent a PUT operation link.   first Refers to the first page of the result list.   last Refers to the last page of the result list provided total_required is specified as a query parameter.   next Refers to the next page of the result list.   prev Refers to the previous page of the result list.   collection Refers to a collections resource (e.g /v1/users).   latest-version Points to a resource containing the latest (e.g., current) version.   search Refers to a resource that can be used to search through the link\u0026rsquo;s context and related resources.   up Refers to a parent resource in a hierarchy of resources.    For all controller style complex operations, the controller action name must be used as the link relation type (e.g. activate,cancel,refund).\nSee HATEOAS Use Cases to find where HATEOAS could be used.\nNaming conventions for URIs, query parameters, resources, fields and enums are described in this section. Let us emphasize here that these guidelines are less about following the conventions exactly as described here but they are more about defining some naming conventions and sticking to them in a consistent manner while designing APIs. For example, we have followed snake_case for field and file names, however, you could use other forms such as CamelCase or something else that you have devised yourself. It is important to adhere to a defined convention.\nURIs follow RFC 3986 specification. This specification simplifies REST API service development and consumption. The guidelines in this section govern your URI structure and semantics following the RFC 3986 constraints.\nAccording to RFC 3986, the generic URI syntax consists of a hierarchical sequence of components referred to as the scheme, authority, path, query, and fragment as shown in example below.\n https://example.com:8042/over/there?name=ferret#nose \\___/ \\_______________/\\_________/\\_________/\\__/ | | | | | scheme authority path query fragment Following is a brief description of the URI specific naming convention guidelines for APIs. This specification uses parentheses \u0026ldquo;( )\u0026rdquo; to group, an asterisk \u0026quot; * \u0026quot; to specify zero or more occurrences, and brackets \u0026ldquo;[ ]\u0026rdquo; for optional fields.\n[scheme\u0026quot;://\u0026quot;][host[':'port]]\u0026quot;/v\u0026quot; major-version '/'namespace '/'resource ('/'resource)* '?' query  URIs MUST start with a letter and use only lower-case letters. Literals/expressions in URI paths SHOULD be separated using a hyphen ( - ). Literals/expressions in query strings SHOULD be separated using underscore ( _ ). URI paths and query strings MUST percent encode data into UTF-8 octets. Plural nouns SHOULD be used in the URI where appropriate to identify collections of data resources.  /invoices /statements   An individual resource in a collection of resources MAY exist directly beneath the collection URI.  /invoices/{invoice_id}   Sub-resource collections MAY exist directly beneath an individual resource. This should convey a relationship to another collection of resources (invoice-items, in this example).  /invoices/{invoice_id}/items   Sub-resource individual resources MAY exist, but should be avoided in favor of top-level resources.  /invoices/{invoice_id}/items/{item_id} Better: /invoice-items/{invoice_item_id}   Resource identifiers SHOULD follow recommendations described in subsequent section.  Examples\n https://api.foo.com/v1/vault/credit-cards https://api.foo.com/v1/vault/credit-cards/CARD-7LT50814996943336KESEVWA https://api.foo.com/v1/payments/billing-agreements/I-V8SSE9WLJGY6/re-activate  Formal Definition:\n   Term Defiition     URI [end-point] \u0026lsquo;/\u0026rsquo; resource-path ['?\u0026lsquo;query]   end-point [scheme \u0026ldquo;://\u0026quot;][ host [':\u0026rsquo; port]]   scheme \u0026ldquo;http\u0026rdquo; or \u0026ldquo;https\u0026rdquo;   resource-path \u0026ldquo;/v\u0026rdquo; version \u0026lsquo;/\u0026rsquo; namespace-name \u0026lsquo;/\u0026rsquo; resource ('/\u0026rsquo; resource)   resource resource-name ['/\u0026rsquo; resource-id]   resource-name Alpha (Alpha | Digit | \u0026lsquo;-')*   resource-id value   query name \u0026lsquo;=\u0026rsquo; value ('\u0026amp;\u0026rsquo; name = value)*   name Alpha (Alpha | Digit | \u0026lsquo;_')*   value URI Percent encoded value    Legend\n' Surround a special character with single quotes \u0026quot;\tSurround strings with double quotes ()\tUse parentheses for grouping []\tUse brackets to specify optional expressions *\tAn expression can be repeated zero or more times When modeling a service as a set of resources, developers MUST follow these principles:\n  Nouns MUST be used, not verbs.\n  Resource names MUST be singular for singletons; collections\u0026rsquo; names MUST be plural.\n A description of the automatic payments configuration on a user\u0026rsquo;s account  GET /autopay returns the full representation   A collection of hypothetical charges:  GET /charges returns a list of charges that have been made POST /charges creates a new charge resource, /charges/1234 GET /charges/1234 returns a full representation of a single charge      Resource names MUST be lower-case and use only alphanumeric characters and hyphens.\n The hyphen character, ( - ), MUST be used as a word separator in URI path literals. Note that this is the only place where hyphens are used as a word separator. In nearly all other situations, the underscore character, ( _ ), MUST be used.     Literals/expressions in query strings SHOULD be separated using underscore ( _ ). Query parameters values MUST be percent-encoded. Query parameters MUST start with a letter and SHOULD be all in lower case. Only alpha characters, digits and the underscore ( _ ) character SHALL be used. Query parameters SHOULD be optional. Some query parameter names are reserved, as indicated in Resource Collections.  For more specific info on the query parameter usage, see URI Standards.\nThe data model for the representation MUST conform to JSON. The values may themselves be objects, strings, numbers, booleans, or arrays of objects.\n Key names MUST be lower-case words, separated by an underscore character, ( _ ).  foo bar_baz   Prefix such as is_ or has_ SHOULD NOT be used for keys of type boolean. Fields that represent arrays SHOULD be named using plural nouns (e.g. authenticators-contains one or more authenticators, products-contains one or more products).  Entries (values) of an enum SHOULD be composed of only upper-case alphanumeric characters and the underscore character, ( _ ).\n FIELD_10 NOT_EQUAL  If there is an industry standard that requires us to do otherwise, enums MAY contain other characters.\nA link relation type represented by rel must be in lower-case.\n Example  \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://uri.foo.com/v1/customer/partner-referrals/ALT-JFWXHGUV7VI/activate\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;activate\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;POST\u0026quot; } ] JSON schema for various types used by API SHOULD each be contained in separate files, referenced using the $ref syntax (e.g. \u0026quot;$ref\u0026quot;:\u0026quot;object.json\u0026quot;). JSON Schema files SHOULD use underscore naming syntax, e.g. transaction_history.json.\nAn API\u0026rsquo;s resource path consists of URI\u0026rsquo;s path, query and fragment components. It would include API\u0026rsquo;s major version followed by namespace, resource name and optionally one or more sub-resources. For example, consider the following URI.\nhttps://api.foo.com/v1/vault/credit-cards/CARD-7LT50814996943336KESEVWA\nFollowing table lists various pieces of the above URI\u0026rsquo;s resource path.\n   Path Piece Description Definition     v1 Specifies major version 1 of the API The API major version is used to distinguish between two backward-incompatible versions of the same API. The API major version is an integer value which MUST be included as part of the URI.   vault The namespace Namespace identifiers are used to provide a context and scope for resources. They are determined by logical boundaries in the business capability model implemented by the API platform.   credit-cards The resource name If the resource name represents a collection of resources, then the GET method on the resource should retrieve the list of resources. Query parameters should be used to specify the search criteria.   CARD-7LT50814996943336KESEVWA The resource ID To retrieve a particular resource out of the collection, a resource ID MUST be specified as part of the URI. Sub-resources are discussed below.    Sub-resources represent a relationship from one resource to another. The sub-resource name provides a meaning for the relationship. If cardinality is 1:1, then no additional information is required. Otherwise, the sub-resource SHOULD provide a sub-resource ID for unique identification. If cardinality is 1:many, then all the sub-resources will be returned. No more than two levels of sub-resources SHOULD be supported.\n   Example Description     GET https://api.foo.com/v1/customer-support/disputes/ABCD1234/documents This call should return all the documents associated with dispute ABCD1234.   GET https://api.foo.com/v1/customer-support/disputes/ABCD1234/documents/102030 This call should return only the details for a particular document associated with this dispute. Keep in mind that this is only an illustrative example to show how to use sub-resource IDs. In practice, two step invocations SHOULD be avoided. If second identifier is unique, top-level resource (e.g. /v1/customer-support/documents/102030) is preferred.   GET https://api.foo.com/v1/customer-support/disputes/ABCD1234/transactions The following example should return all the transactions associated with this dispute and their details, so there SHOULD NOT be a need to specify a particular transaction ID. If specific transaction ID retrieval is needed, /v1/customer-support/transactions/ABCD1234 is preferred (assuming IDs are unique).    Resource identifiers identify a resource or a sub-resource. These MUST conform to the following guidelines.\n The lifecycle of a resource identifier MUST be owned by the resource\u0026rsquo;s domain model, where they can be guaranteed to uniquely identify a single resource. APIs MUST NOT use the database sequence number as the resource identifier. A UUID, Hashed Id (HMAC based) is preferred as a resource identifier. For security and data integrity reasons all sub-resource IDs MUST be scoped within the parent resource only.Example: /users/1234/linked-accounts/ABCDEven if account \u0026ldquo;ABCD\u0026rdquo; exists, it MUST NOT be returned unless it is linked to user: 1234. Enumeration values can be used as sub-resource IDs. String representation of the enumeration value SHOULD be used. There MUST NOT be two resource identifiers one after the other.Example: https://api.foo.com/v1/payments/payments/12345/102030 Resource IDs SHOULD try to use either Resource Identifier Characters or ASCII characters. There SHOULD NOT be any ID using UTF-8 characters. Resource IDs and query parameter values MUST perform URI percent-encoding for any character other than URI unreserved characters. Query parameter values using UTF-8 characters MUST be encoded.  Query parameters are name/value pairs specified after the resource path, as prescribed in RFC 3986. Naming Conventions should also be followed when applying the following section.\nFilter a resource collection  Query parameters SHOULD be used only for the purpose of restricting the resource collection or as search or filtering criteria. The resource identifier in a collection SHOULD NOT be used to filter collection results, resource identifier should be in the URI. Parameters for pagination SHOULD follow pagination guidelines. Default sort order SHOULD be considered as undefined and non-deterministic. If a explicit sort order is desired, the query parameter sort SHOULD be used with the following general syntax: {field_name}|{asc|desc},{field_name}|{asc|desc}. For instance: /accounts?sort=date_of_birth|asc,zip_code|desc  Query parameters on a single resource In typical cases where one resource is utilized (e.g. /v1/payments/billing-plans/P-94458432VR012762KRWBZEUA), query parameters SHOULD NOT be used.\nCache-friendly APIs In rare cases where a resource needs to be highly cacheable (usually data with minimal change), query parameters MAY be utilized as opposed to POST + request body. As POST would make the response uncacheable, GET is preferred in these situations. This is the only scenario in which query parameters MAY be required.\nQuery parameters with POST When POST is utilized for an operation, query parameters are usually NOT RECOMMENDED in favor of request body fields. In cases where POST provides paged results (typically in complex search APIs where GET is not appropriate), query parameters MAY be used in order to provide hypermedia links to the next page of results.\nPassing multiple values for the same query parameter When using query parameters for search functionality, it is often necessary to pass multiple values. For instance, it might be the case that a resource could have many states, such as OPEN, CLOSED, and INVALID. What if an API client wants to find all items that are either CLOSED or INVALID?\n  It is RECOMMENDED that APIs implement this functionality by repeating the query parameter. This is inherently supported by HTTP standards and already built in to most client libraries.\n The query above would be implemented as ?status=CLOSED\u0026amp;status=INVALID. The parameter MUST be marked as repeatable in API specifications using \u0026quot;repeated\u0026quot;: true in the parameter\u0026rsquo;s definition section. The parameter\u0026rsquo;s name SHOULD be singular.    URIs have practical length limits that are quite low - most conservatively, about 2,000 characters. Therefore, there are situations where API designers MAY choose to use a single query parameter that accepts comma-separated values in order to accommodate more values in the query-string. Keep in mind that server and client libraries don\u0026rsquo;t consistently provide this functionality, which means that implementers will need to write additional string parsing code. Due to the additional complexity and divergence from HTTP standards, this solution is NOT RECOMMENDED unless justified.\n The query above would be implemented as ?statuses=CLOSED,INVALID. The parameter MUST NOT be marked as repeatable in API specifications. The parameter MUST be marked as \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; in API specifications in order to accommodate comma-separated values. Any other type value MUST NOT be used. The parameter description should indicate that comma separated values are accepted. The query-parameter name SHOULD be plural, to provide a hint that this pattern is being employed. The comma character (Unicode U+002C) SHOULD be used as the separator between values. The API documentation MUST define how to escape the separator character, if necessary.    We would assume that JSON Schema is used to describe request/response models. Determine the version of JSON Schema to use for your APIs. At the time of writing this, draft-04 is the latest version. JSON Schema draft-03 has been deprecated, as support in tools is mostly focused on draft-04. The draft-04 is backwards incompatible with draft-03.\nThere are various options available to define the API\u0026rsquo;s contract interface (API specification or API description). Examples are: OpenAPI (fka Swagger), Google Discovery Document, RAML, API BluePrint and so on.\nOpenAPI is a vendor neutral API description format. The OpenAPI Schema Object (or OpenAPI JSON) is based on the draft-04 and uses a predefined subset of the draft-04 schema. In addition, there are extensions provided by the specification to allow for more complete documentation.\nWe have used OpenAPI wherever we need to describe the API specification throughout this document.\nA note about using $schema with OpenAPI\nAs of writing this (Q12017), OpenAPI tools DO NOT recognize $schema value and (incorrectly) assume the value of $schema to be http://swagger.io/v2/schema.json# only. The following description applies to JSON schema (http://json-schema.org) used in API specification specified using specifications other than OpenAPI.\nUse $schema to indicate the version of JSON schema used by each JSON type you define as shown below.\n{ \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-04/schema#\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Order\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An order transaction.\u0026quot;, \u0026quot;properties\u0026quot;: { } } In case your JSON type uses links, media and other such keywords or schemas such as for linkDescription that are defined in http://json-schema.org/draft-04/hyper-schema, you should provide the value for $schema accordingly as shown below.\n{ \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-04/hyper-schema#\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Linked-Order\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An order transaction using HATEOAS links.\u0026quot;, \u0026quot;properties\u0026quot;: { } } If you are unsure about the specific schema version to refer to, it would be safe to refer http://json-schema.org/draft-04/hyper-schema# schema since it would cover all aspects of any JSON schema.\nWhen resources contain immutable fields, PUT/PATCH operations can still be utilized to update that resource. To indicate immutable fields in the resource, the readOnly field can be specified on the immutable fields.\nExample \u0026quot;properties\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Identifier of the resource.\u0026quot;, \u0026quot;readOnly\u0026quot;: true }, Key differences between JSON schema draft-03 and draft-04 have been captured by JSON Schema contributors in a changelog. Additionally, this StackOverflow thread provides some additional quality migration guidance.\nThe following items are the most common migration issues API specifications will need to address:\ndraft-03 defines required fields in the composition of a field:\n{ \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-03/schema#\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Order\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An order transaction.\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Identifier of the order transaction.\u0026quot; }, \u0026quot;amount\u0026quot;: { \u0026quot;required\u0026quot;: true, \u0026quot;description\u0026quot;: \u0026quot;Amount being collected.\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/amount.json\u0026quot; } } } In draft-04, an array as a peer to properties is used to designate the required fields:\n{ \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-04/schema#\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Order\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An order transaction.\u0026quot;, \u0026quot;required\u0026quot;: [ \u0026quot;amount\u0026quot; ], \u0026quot;properties\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Identifier of the order transaction.\u0026quot; }, \u0026quot;amount\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Amount being collected.\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/amount.json\u0026quot; } } } The readonly field was removed from draft-03, and replaced by readOnly (note the upper case O).\nFormat The format attribute is used when defining fields which fall into a certain predefined pattern.\nThese following formats are deprecated in draft-04:\n date time  Therefore, only \u0026quot;format\u0026quot;: \u0026quot;date-time\u0026quot; MUST be used for any variation of date, time, or date and time. Any references to formats of date or time should be updated to date-time.\nField descriptions SHOULD indicate specifics of whether date or time is accepted. date-time specifies that ISO-8601/RFC3339 dates are utilized, which includes date-only and time-only.\nBe aware that anyOf/allOf/oneOf syntax can cause issues with tooling, as code generators, documentation tools and validation of these keywords is often not implemented.\nallOf The allOf keyword MUST only be used for the purposes listed here.\nExtend object The allOf keyword in JSON Schema SHOULD be used for extending objects. In draft-03, this was implemented with the extends keyword, which has been deprecated in draft-04.\nExample A common need is to extend a common type with additional fields. In this example, we will extend the address with a type field.\n\u0026quot;shipping_address\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/address_portable.json\u0026quot; } Using the allOf keyword, we can combine both the common type address schema and an extra schema snippet for the address type:\n\u0026quot;shipping_address\u0026quot;: { \u0026quot;allOf\u0026quot;: [ // Here, we include our \u0026quot;core\u0026quot; address schema... { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/address_portable.json\u0026quot; }, // ...and then extend it with stuff specific to a shipping // address { \u0026quot;properties\u0026quot;: { \u0026quot;type\u0026quot;: { \u0026quot;enum\u0026quot;: [ \u0026quot;residential\u0026quot;, \u0026quot;business\u0026quot; ] } }, \u0026quot;required\u0026quot;: [\u0026quot;type\u0026quot;] } ] } anyOf/oneOf The anyOf and oneOf keywords SHOULD NOT be used to design APIs. A variety of problems occur from these keywords:\n Codegen tools do not have accurate way to generate models/objects from these definitions. Developer portals would have significant difficulty in clearly explaining to API consumers the meaning of these relationships. Consumers using statically typed languages (e.g. C#, Java) have a more complex experience trying to conditionally deserialize objects which change based on some element.  Custom deserialization code is required to represent objects based on the response, standard libraries do not accommodate this out of the box. Flat structures which combine all possible fields in an object are automatically deserialized properly.    anyOf/oneOf Problems: Example { \u0026quot;activity_type\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;The entity type of the item. One of 'PAYMENT', 'MONEY-REQUEST', 'RECURRING-PAYMENT-PROFILE', 'ORDER', 'PAYOUT', 'SUBSCRIPTION', 'INVOICE'\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;enum\u0026quot;: [ \u0026quot;PAYMENT\u0026quot;, \u0026quot;MONEY-REQUEST\u0026quot; ] }, \u0026quot;extensions\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Extension to core activity fields\u0026quot;, \u0026quot;oneOf\u0026quot;: [ { \u0026quot;$ref\u0026quot;: \u0026quot;extended_properties.json#/definitions/payment_properties\u0026quot; }, { \u0026quot;$ref\u0026quot;: \u0026quot;extended_properties.json#/definitions/money_request_properties\u0026quot; } ] } } In order for an API consumer to deserialize this response (where POJO/POCO objects are used), standard mechanisms would not work. Because the extensions field can change on any given response, the consumer is forced to create a composite object to represent both payment_properties.json and money_request_properties.json.\nA better approach:\n{ \u0026quot;activity_type\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;The entity type of the item. One of 'PAYMENT', 'MONEY-REQUEST', 'RECURRING-PAYMENT-PROFILE', 'ORDER', 'PAYOUT', 'SUBSCRIPTION', 'INVOICE'\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;enum\u0026quot;: [ \u0026quot;PAYMENT\u0026quot;, \u0026quot;MONEY-REQUEST\u0026quot; ] }, \u0026quot;payment\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Payment-specific activity.\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;payment.json\u0026quot; }, \u0026quot;money_request\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Money request-specific activity.\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;money_request.json\u0026quot; } } In this scenario, both payment and money_request are in the definition. However, in practice, only one field would be serialized based on the activity_type.\nFor API consumers, this is a very predictable response, and allows for easy deserialization through standard libraries, without writing custom deserializers.\nThis section provides guidelines related to usage of JSON primitive types as well as commonly useful JSON types for address, name, currency, money, country, phone, among other things.\nJSON Schema draft-04 SHOULD be used to define all fields in APIs. As such, the following notes about the JSON Schema primitive types SHOULD be respected. Following are the guidelines governing use of JSON primitive type representations.\nAt a minimum, strings SHOULD always explicitly define a minLength and maxLength.\nThere are several reasons for doing so.\n Without a maximum length, it is impossible to reliably define a database column to store a given string. Without a maximum and minimum, it is also impossible to predict whether a change in length will break backwards-compatibility with existing clients. Finally, without a minimum length, it is often possible for clients to send an empty string when they should not be allowed to do so.  APIs MAY avoid defining minLength and maxLength only if the string value is from another upstream system that has refused to provide any information on these values. This decision must be documented in the schema.\nAPI authors SHOULD consider practical limitations when defining maxLength. For example, when using the VARCHAR2 type, modern versions of Oracle can safely store a Unicode string of no more than 1,000 characters. (The size limit is 4,000 bytes and each Unicode character may take up to four bytes for storage).\nstring SHOULD utilize the pattern property as appropriate, especially when defining enumerated values or numbers. However, it is RECOMMENDED not to overly constrain fields without a valid technical reason.\nThe JSON Schema enum keyword is difficult to use safely. It is not possible to add new values to an enum in a schema that describes a service response without breaking backwards compatibility. In that scenario, clients will often reject responses with values that are not in the older copy of the schema that they posess. This is usually not the desired behavior. Clients should usually handle unknown values more gracefully, but since you can\u0026rsquo;t control nor verify their behavior, it is not safe to add new enum values.\nFor the reasons stated above, the schema author MUST comply with the following guidelines while using an enum with the JSON type string.\n The keyword enum SHOULD be used only when the set of values are fixed and would never change in future. If you anticipate adding new values to the enum array in future, avoid using the keyword enum. You SHOULD instead use a string type and document all acceptable values for the string. When using a string type to express enumerated values, you SHOULD enforce naming conventions through a pattern field. If there is no technical reason to do otherwise \u0026ndash; for instance, a pre-existing database column of smaller size \u0026ndash; maxLength should be set to 255. minLength should be set to 1 to prevent clients sending the empty string. All possible values of an enum field SHOULD be precisely defined in the documentation. If there is not enough space in the description field to do so, you SHOULD use the API’s user guide to define them.  Given below is the JSON snippet for enforcing naming conventions and length constraints.\n{ \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;minLength\u0026quot;: 1, \u0026quot;maxLength\u0026quot;: 255, \u0026quot;pattern\u0026quot;: \u0026quot;^[0-9A-Z_]+$\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;A description of the field. The possible values are OPTION_ONE and OPTION_TWO.\u0026quot; } There are a number of difficulties associated with number type in JSON.\nJSON itself defines a number very simply: it is an unbounded, fixed-point value. This is illustrated well by the railroad diagram for number at JSON. There is only one number type in JSON; there is no separate integer type.\nJSON Schema diverges from JSON and defines two number types: number and integer. This is purely a convenience for schema validation; the JSON number type is used to implement both. Just as in JSON, both types are unbounded unless the schema author provides explicit minimum and maximum values.\nMany programming languages do not safely handle unbounded values in JSON. JavaScript is an excellent example. A JSON deserializer is provided as part of the ECMAScript specification. However, it requires that all JSON numbers are deserialized into the only number type supported by JavaScript \u0026ndash; 64-bit floating point. This means that attempting to deserialize any JSON number larger than about 2^53 in a JavaScript client will result in an exception.\nTo ensure the greatest degree of cross-client compatibility possible, schema authors SHOULD:\n  Never use the JSON Schema number type. Some languages may interpret it as a fixed-point value, and some as floating-point. Always use string to represent a decimal value.\n  Only define integer types for values that can be represented in a 32-bit signed integer, that is to say, values between ((2^31) - 1) and -(2^31). This ensures compatibility across a wide range of programming languages and circumstances. For example, array indices in JavaScript are signed 32-bit integers.\n  When using an integer type, always provide an explicit minimum and a maximum. This not only allows backwards-incompatible changes to be detected, it also guarantees that all values can fit in a 32-bit signed integer. If there are no technical reasons to do otherwise, the maximum and minimum should be defined as 2147483647 (((2^31) - 1)) and -2147483648 (-(2^31)) or 0 respectively. Common sense should be used to determine whether to allow negative values. Business logic that could change in the future generally SHOULD NOT be used to determine boundaries; business rules can easily change and break backwards compatibility.\n  If there is any possibility that the value could not be represented by a signed 32-bit integer, now or in the future, not use the JSON Schema integer type. Use a string instead.\nExamples\nThis integer type might be used to define an array index or page count, or perhaps the number of months an account has been open.\n{ \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot;, \u0026quot;minimum\u0026quot;: 0, \u0026quot;maximum\u0026quot;: 2147483647 } When using a string type to represent a number, authors MUST provide boundaries on size using minLength and maxLength, and constrain the definition of the string to only represent numbers using pattern.\nFor example, this definition only allows positive integers and zero, with a maximum value of 999999:\n{ \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;pattern\u0026quot;: \u0026quot;^[0-9]+$\u0026quot;, \u0026quot;minLength\u0026quot;: 1, \u0026quot;maxLength\u0026quot;: 6 } The following definition allows the representation of fixed-point decimal values both positive or negative, with a maximum length of 32 and no requirements on scale:\n{ \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;pattern\u0026quot;: \u0026quot;^(-?[0-9]+|-?([0-9]+)?[.][0-9]+)$\u0026quot; \u0026quot;maxLength\u0026quot;: 32, \u0026quot;minLength\u0026quot;: 1, } JSON defines array as unbounded.\nAlthough practical limits are often much lower due to memory constraints, many programming languages do place maximum theoretical limits on the size of arrays. For example, JavaScript is limited to the length of a 32-bit unsigned integer by the ECMA-262 specification. Java is limited to about Integer.MAX_VALUE - 8, which is less than half of JavaScript.\nTo ensure maximum compatibility across languages and encourage paginated APIs, maxItems SHOULD always be defined by schema authors. maxItems SHOULD NOT have a value greater than can be represented by a 16-bit signed integer, in other words, 32767 or (2^15) - 1).\nNote that developers MAY choose to set a smaller value; the value 32767 is a default choice to be used when no better choice is available. However, developers SHOULD design their API for growth. For example, although a paginated API may only support a maximum of 100 results per page today, performance improvements may allow deveopers to improve that to 1,000 results next year. Therefore, maxItems SHOULD NOT be used to communicate maximum page size.\nminItems SHOULD also be defined. In most situations, its value will be either 0 or 1.\nAPIs MUST NOT produce or consume null values.\nnull is a primitive type in JSON. When validating a JSON document against JSON Schema, a property\u0026rsquo;s value can be null only when it is explicitly allowed by the schema, using the type keyword (e.g. {\u0026quot;type\u0026quot;: \u0026quot;null\u0026quot;}). Since in an API type will always need to be defined to some other value such as object or string, and these standards prohibit using schema composition keywords such as anyOf or oneOf that allow multiple types, if an API produces or consumes null values, it is unlikely that, according to the API\u0026rsquo;s own schemas, this is actually valid data.\nIn addition, in JSON, a property that doesn\u0026rsquo;t exist or is missing in the object is considered to be undefined; this is conceptually separate from a property that is defined with a value of null, but many programming languages have difficulty drawing this distinction.\nFor example, a property my_property defined as {\u0026quot;type\u0026quot;: \u0026quot;null\u0026quot;} is represented as\n{ \u0026quot;my_property\u0026quot;: null } While a property that is undefined would not be present in the object:\n{ } In most strongly typed languages, such as Java, there is no concept of an undefined type, which means that for all undefined fields in a JSON object, a deserializer would return the value of such types as null when you try to retrieve them. Similarly, some Java-based JSON serializers serialize fields to JSON null by default, even though it is not possible for the serializer to determine whether the author of the Java object intended for that property to be defined with a value of null, or simply undefined. In Jackson, for example, this behavior is moderated through use of the JsonInclude annotation. On the other hand, the org.json library defines an object called NULL to distinguish between null and undefined.\nEschewing JSON null completely helps avoid many of these subtle cross-language compatibility traps.\nSetting of additionalProperties to false in schema objects breaks backward compatibility in those clients that use an API\u0026rsquo;s JSON schemas (defined by its contract) to validate the API requests and responses. For the same reason, the schema author MUST not explicitly set the additionalProperties to false.\nThe API implementation SHOULD instead enforce the conformance of requests and responses to an API contract by hard validating the requests and responses against the defined API contract at run-time.\nResource representations in API MUST reuse the common data type definitions where possible. Following sections provide some details about some of these common types. Please refer to the READMEand the schema for more details.\nWe recommend using address_portable.json for all requirements related to address. The address_portable.json is\n backward compatible with hcard address microformats, forward compatible with Google open-source address validation metadata (i18n-api) and W3 HTML5.1 autofill fields, allows mapping to and from many address normalization services (ANS) such as AddressDoctor.  Please refer to README for Address for more details about the address type, guidance on how to map it to i18n-api\u0026rsquo;s address and W3 HTML5.1\u0026rsquo;s autofill fields.\nMoney is a standard type to represent amounts. The Common Type money.json provides common definition of money.\nData-type integrity rules:\n Both currency_code and value MUST exist for this type to be valid. Some currencies such as \u0026ldquo;JPY\u0026rdquo; do not have sub-currency, which means the decimal portion of the value should be \u0026ldquo;.0\u0026rdquo;. An amount MUST NOT be negative. For example a $5 bill is never negative. Negative or positive is an internal notion in association with a particular account/transaction and in respect of the type of the transaction performed.  Percentages and interest rates are very common when dealing with money. One of the most common examples is annual percentage rate, or APR. These interest rates SHOULD always be represented according to the following rules:\n The Common Type percentage.json MUST be used. This ensures that the rate is represented as a fixed-point decimal.  All validation rules defined in the type MUST be followed.   The value MUST be represented as a percentage.  Example: if the interest rate is 19.99%, the value returned by the API MUST be 19.99.   The field\u0026rsquo;s JSON schema description field SHOULD inform clients how the representation works.  Example: \u0026ldquo;The interest rate is represented as a percentage. For example, an interest rate of 19.99% would be serialized as 19.99.\u0026rdquo;   It is the responsibility of the client to transform this value into a format suitable for display to the end-user. For example, some countries use the comma ( , ) as a decimal separator instead of the period ( . ). Services MUST NOT vary the format of values passed to or from a service based on end-user display concerns.  The following common types MUST be used with regard to global country, currency, language and locale.\n country_code  All APIs and services MUST use the ISO 3166-1 alpha-2 two letter country code standard.   currency_code  Currency type MUST use the three letter currency code as defined in ISO 4217. For quick reference on currency codes, see http://en.wikipedia.org/wiki/ISO_4217.   language.json  Language type uses BCP-47 language tag.   locale.json  Locale type defines the concept of locale, which is composed of country_code and language. Optionally, IANA timezone can be included to further define the locale.   province.json  Province type provides detailed definition of province or state, based on ISO-3166-2 country subdivisions, with room for variant local, international, and abbreviated representations of province names. Useful for logistics, statistics, and building state pull-downs for on-boarding.    When dealing with date and time, all APIs MUST conform to the following guidelines.\n  The date and time string MUST conform to the date-time universal format defined in section 5.6 of RFC3339. In use cases where you would require only a subset of the fields (e.g full-date or full-time) from the RFC3339 date-time format, you SHOULD use the Date Time Common Types to express these.\n  All APIs MUST only emit UTC time (aka Zulu time or GMT) in the responses.\n  When processing requests, an API SHOULD accept date-time or time fields that contain an offset from UTC. For example, 2016-09-28T18:30:41.000+05:00 SHOULD be accepted as equivalent to 2016-09-28T13:30:41.000Z. This helps ensure compatibility with third parties who may not be capable of normalizing values to UTC before sending requests. In such cases the offset SHOULD only be used to calculate the equivalent UTC time before it is persisted in the system (because of known platform/language/DB interoperability issues). A UTC offset MUST NOT be used to derive anything else.\n  If the business logic requires expressing the timezone of an event, it is RECOMMENDED that you capture the timezone explicitly by using a separate request/response field. You SHOULD NOT use offset to derive the timezone information. The offset alone is insufficient to accurately transform the stored UTC time back to a local time later. The reason is that a UTC offset might be same for many geographical regions and based on the time of the year there may be additional factors such as daylight savings. For example, an offset UTC-05:00 represents Eastern Standard Time during winter, Central Dayight Time during summer, and year-round offset for Panama, Columbia, and Peru.\n  The timezone string MUST be per IANA timezone database (aka Olson database or tzdata or zoneinfo database), for example America/Los_Angeles for Pacific Time, or Europe/Berlin for Central European Time.\n  When expressing floating time values that are not tied to specific time zones such as user\u0026rsquo;s date of birth, expiry date, publication date etc. in requests or responses, an API SHOULD NOT associate it with a timezone. The reason is that a UTC offset changes the meaning of a floating time value. For examples, all countries with timezones west of prime meridian would consider a floating time value to be the previous day.\n  The following common types MUST be used to express various date-time formats:\n date_time.json SHOULD be used to express an RFC3339 date-time. date_no_time.json SHOULD be used to express full-date from RFC 3339. time_nodate.json SHOULD be used to express full-time from RFC3339. date_year_month.json SHOULD be used to express a floating date that contains only the month and year. For example, card expiry date (2016-09). time_zone.json SHOULD be used for expressing timezone of a RFC3339 date-time or a full-time field.  As per HTTP specifications, the outcome of a request execution could be specifiedusing an integer and a message. The number is known as the status code and the message as the reason phrase. The reason phrase is a human readable message used to clarify the outcome of the response. The HTTP status codes in the 4xx range indicate client-side errors (validation or logic errors), while those in the 5xx range indicate server-side errors (usually defect or outage). However, these status codes and human readable reason phrase are not sufficient to convey enough information about an error in a machine-readable manner. To resolve an error, non-human consumers of RESTful APIs need additional help.\nTherefore, APIs MUST return a JSON error representation that conforms to the error.json schema defined in the Common Types repository. It is recommended that the namespace that an API belongs to has an error catalog associated with it. Please refer to Error Catalog for more details.\nAn error response following error.json as schema MUST include the following fields:\n name: A human-readable, unique name for the error. It is recommended that this value would be retrieved from the error catalog error_spec.json#name before sending the error response. details: An array that contains individual instance(s) of the error with specifics such as the following. This field is required for client side errors (4xx).  field: JSON Pointer to the field in error if in body, else name of the path parameter or query parameter. value: Value of the field in error. issue: Reason for error. It is recommended that this value would be retrieved from the error catalog error_spec_issue.json#issue before sending the error response. location: The location of the field in the error, either query, path, or body. If this field is not present, the default value is body.   debug_id: A unique error identifier generated on the server-side and logged for correlation purposes. message: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it. It is recommended that this value would be retrieved from the error catalog error_spec.json#message before sending the error response. links: HATEOAS links specific to an error scenario. Use these links to provide more information about the error scenario and how to resolve it. You could insert links from error_spec.json#suggested_application_actions and/or error_spec.json#suggested_user_actions here as well as other HATEOAS links relevant to the API.  The following fields are optional:\n information_link: (deprecated) A URI for expanded developer information related to this error; this SHOULD be a link to the publicly available documentation for the type of error. Use links instead.  Use of JSON Pointer If you have used some other means to identify the field in an already released API, you could continue using your existing approach. However, if you plan to migrate to the approach suggested, you would want to bump up the major version of your API and provide migration assistance to your clients as this could be a potential breaking change for them.\nThe JSON Pointer for the field SHOULD be a JSON string value.\nIn validating requests, there are a variety of concerns that should be addressed in the following order:\n   Request Validation Issue HTTP status code     Not well-formed JSON. 400 Bad Request   Contains validation errors that the client can change. 400 Bad Request   Cannot be executed due to factors outside of the request body. The request was well-formed but was unable to be followed due to semantic errors. 422 Unprocessable Entity    This section provides some samples to describe usage of error.json in various scenarios.\nThe following sample shows a validation error of type VALIDATION_ERROR in one field. Because this is a client error, a 400 Bad Request HTTP status code should be returned.\n { \u0026quot;name\u0026quot;:\u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;:[ { \u0026quot;field\u0026quot;:\u0026quot;#/credit_card/expire_month\u0026quot;, \u0026quot;issue\u0026quot;:\u0026quot;Required field is missing\u0026quot;, \u0026quot;location\u0026quot;:\u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;:\u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;:\u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;:\u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } The following sample shows a validation error of the same type, VALIDATION_ERROR, in two fields. Note that details is an array listing all the instances in the error. Because both these are a client errors, a 400 Bad Request HTTP status code should be returned.\n { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/credit_card/expire_month\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Required field is missing\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; }, { \u0026quot;field\u0026quot;: \u0026quot;/credit_card/currency\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;XYZ\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Currency code is invalid\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } For heterogenous types of client-side errors shown below, OBJECT_NOT_FOUND_ERROR and MULTIPLE_CORE_BUNDLES, an array named errors is returned. Each error instance is represented as an item in this array. Because these are client validation errors, a 400 Bad Request HTTP status code should be returned.\n \u0026quot;errors\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;OBJECT_NOT_FOUND_ERROR\u0026quot;, \u0026quot;debug_id\u0026quot;: \u0026quot;38cdd677a83a4\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Bundle is not found.\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;\u0026lt;link to public doc describing OBJECT_NOT_FOUND_ERROR error\u0026gt;\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/bundles/0/bundle_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;33333\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;BUNDLE_NOT_FOUND\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ] }, { \u0026quot;name\u0026quot;: \u0026quot;MULTIPLE_CORE_BUNDLES\u0026quot;, \u0026quot;debug_id\u0026quot;: \u0026quot;52cde38284sd3\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Multiple CORE bundles.\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;\u0026lt;link to public doc describing MULTIPLE_CORE_BUNDLES error\u0026gt;\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/bundles/5/bundle_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;88888\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;MULTIPLE_CORE_BUNDLES\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ] } ] In cases where client input is well-formed and valid but the request action may require interaction with APIs or processes outside of this URI, an HTTP status code 422 Unprocessable Entity should be returned.\n{ \u0026quot;name\u0026quot;: \u0026quot;BALANCE_ERROR\u0026quot;, \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;The account balance is too low. Add balance to your account to proceed.\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#BALANCE_ERROR\u0026quot; } It is important that documentation generation tools and client/server-side binding generation tools recognize error.json. Following section shows how you could refer error.json in an API specification confirming to OpenAPI.\n\u0026quot;responses\u0026quot;: { \u0026quot;200\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Address successfully found and returned.\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;address.json\u0026quot; } }, \u0026quot;403\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Unauthorized request. This error will occur if the SecurityContext header is not provided or does not include a party_id.\u0026quot; }, \u0026quot;404\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;The requested address does not exist.\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/error.json\u0026quot; } }, \u0026quot;default\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Unexpected error response.\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/error.json\u0026quot; } } } The User Guide of an API is a document that is exposed to API consumers. In addition to linking to samples showing successful execution for invocation on various methods exposed by the API, the API developer should also provide links to samples showing error scenarios. It is equally, or perhaps more, important to show the API consumers how an API would propagate errors in a machine-readable form in order to build applications that take necessary actions to handle errors gracefully and in a meaningful manner.\nIn conclusion, we reiterate the message we started with that non-human consumers of RESTful APIs need more help to take necessary actions to resolve an error in a machine-readable manner. Therefore, a representation of errors following the schema described here MUST be returned by APIs for any HTTP status code that falls into the ranges of 4xx and 5xx.\nError handling guidelines described earlier show how to provide error related details responses at runtime. This section explains how to catalog the errors so they can be easily consumed in service runtime and for generating documentation.\nAn Error Catalog is a single JSON file that contains a collection of error specifications (or error metadata) for a namespace. Each error specification includes error name, error message, issue details and related links among other things. The error catalog supports multiple locales or languages. For a specific error catalog, there should be exactly one default version, known as the top-level catalog, which could be in English for example. There should be corresponding locale-specific catalogs, one for each additional supported locale, as needed.\nFollowing are some reasons to catalog the errors for an API:\n To externalize hard-coded error message strings from the API implementation: Developers are good at writing code but not necessarily good at writing error messages. Often error messages written by a developer make a lot of assumptions about the context and audience. It is hard to change such error messages if these are embedded in implementation code. For example, to change a message from \u0026ldquo;Add Card refused due to compliance guidelines\u0026rdquo; to Could not add card due to failure to comply with guideline %s, a service developer has to make the change and also redeploy the service emitting that error. To localize the error strings: If error related strings such as message, issue, actions, among other things in error.json are externalized, it is easy for the documentation and an internationalization team to modify and localize these without any help from service developers and without requiring redeployment of the services. To keep service\u0026rsquo;s implementation and the API documentation in sync with regards to errors: API consumers should be able to refer with confidencethe API\u0026rsquo;s documentation for errors generated by the services at runtime. This helps to reduce the cost and the time spent supporting an API and increases adoptability of the API.  There are four main JSON schema files for the Error Catalog.\n error_catalog.json defines top-level catalog container.  namespace: API namespace language: language used to catalog the errors. Default is US English. This value MUST be a BCP-47 language tag as in en or en-US. errors: one or more error catalog items.   error_catalog_item.json defines an item in error catalog. This schema in its initial version only includes error specification error_spec. In future versions, it would provide a space to establish relationship between an error specification and method specifications that would use the error specification to respond with error. error_spec.json is where the core of error specification is defined. The specification includes the following properties.  name: A human-readable, unique name for the error. This value MUST be the value set in error.json#name before sending the error response. message: A human-readable message, describing the error. This message MUST be a description of the problem NOT a suggestion about how to fix it. This value MUST be the value set in error.json#message before sending the error response. This value could be localized. log_level: Log level associated with this error. This MUST NOT be streamed out in error responses or exposed in any external documentation. legacy_code: Legacy error code. Use if and only if the existing and published error metadata uses the code and it must continue to be supported. Utilize additionalProperties of error.json to send this code in the error response. http_status_codes: Applicable HTTP status codes for this error. suggested_application_actions: Suggest practical actions that the developer of application consuming the API could take in order to resolve the error condition. These MUST be in English. suggested_user_actions: Suggest practical actions that a user of the application consuming the API could take in order to resolve the error condition. These MUST be in the language used error_catalog.json#language. links: Error context specific HATEOAS links. Corresponds to error.json#links. issues: Issues associated with this error as defined in error_spec_issue.json. Each issue corresponds to an item in error_details.json.     error_spec_issue.json defines details related to the error. For example, there could be multiple validation errors triggering 400 BAD REQUEST. Each invalid field MUST be listed in the error_details.json while sending the error response.  id: Catalog-unique identifier of the issue. This is required in order to search for the error_spec_issue from cached error catalog. issue: Reason for error. This value MUST be the value set in error_details.json#issue. The issue string could have variables. Please use parametrized string following the Java String Formatter syntax. This value chould be localized.    For API services that are implemented in Java, various strings found in the error catalog MUST be formatted using Java\u0026rsquo;s printf-style inspired format. It\u0026rsquo;s recommended to use Java\u0026rsquo;s format specification for values of message and issue fields in the error catalog where applicable.\nService developers are strongly encouraged to use tools, such as Java String Formatter or similar, to interpret the formatted strings as found in the error catalog.\nFor example, an error_spec having value Could not add card due to failure to comply with guideline %s for message must be interpreted using a formatter as shown below.\ncom.foo.platform.error.ErrorSpec errorSpec = \u0026lt;find errorSpec from catalog\u0026gt; com.foo.platform.error.Error error = new Error(); error.setName(errorSpec.getName()); error.setDebugId(\u0026quot;debugId-777\u0026quot;); error.setLogLevel(errorSpec.getLogLevel()); String errorMessageString = String.format(errorSpec.getMessage(), \u0026quot;GUIDELINE: XYZ\u0026quot;); error.setMessage(errorMessageString); List\u0026lt;Detail\u0026gt; details = new ArrayList\u0026lt;\u0026gt;(); Detail detail = new Detail(); String issueString = String.format(errorSpec.getIssues().get(0).getIssue(), ... \u0026lt;variables in issue string\u0026gt;); detail.setIssue(issueString); details.add(detail); error.setDetails(details); Response response = Response.status(Response.Status.BAD_REQUEST).entity(error).encoding(MediaType.APPLICATION_JSON).build(); throw new WebApplicationException(response); The above example code is for illustration purposes only.\nThis section provides some sample error catalogs.\nSample catalog : namespace : payments { \u0026quot;namespace\u0026quot;: \u0026quot;payments\u0026quot;, \u0026quot;language\u0026quot;: \u0026quot;en-US\u0026quot;, \u0026quot;errors\u0026quot;: [{ \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid request - see details\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 400 ], \u0026quot;issues\u0026quot;: [{ \u0026quot;id\u0026quot;: \u0026quot;InvalidCreditCardType\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Value is invalid (must be visa, mastercard, amex, or discover)\u0026quot; }], \u0026quot;suggested_application_actions\u0026quot;: [ \u0026quot;Provide an acceptable card type and resend the request.\u0026quot; ] } }, { \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;PAYEE_ACCOUNT_LOCKED_OR_CLOSED\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Payee account is locked or closed\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 422 ], \u0026quot;legacy_code\u0026quot;: \u0026quot;PAYER_ACCOUNT_LOCKED_OR_CLOSED\u0026quot;, \u0026quot;issues\u0026quot;: [{ \u0026quot;id\u0026quot;: \u0026quot;PayerAccountLocked\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;The account receiving this payment is locked or closed and cannot receive payments.\u0026quot; }], \u0026quot;suggested_user_actions\u0026quot;: [ \u0026quot;Contact Customer Service at contact@foo.com\u0026quot; ] } }] } Sample catalog : namespace : wallet { \u0026quot;namespace\u0026quot;: \u0026quot;wallet\u0026quot;, \u0026quot;language\u0026quot;: \u0026quot;en-US\u0026quot;, \u0026quot;errors\u0026quot;: [{ \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;INVALID_ISSUER_DETAILS\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid issuer details\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 400 ], \u0026quot;issues\u0026quot;: [{ \u0026quot;id\u0026quot;: \u0026quot;ISSUER_DATA_NOT_FOUND\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Issuer data not found\u0026quot; }], \u0026quot;suggested_application_actions\u0026quot;: [ \u0026quot;Provide issuer related data and resend the request.\u0026quot; ] } }, { \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;INSTRUMENT_BLOCKED\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Instrument is currently blocked.\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 422 ], \u0026quot;issues\u0026quot;: [{ \u0026quot;id\u0026quot;: \u0026quot;BankAccountBlocked\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Bank account is blocked due max random deposit retries. \u0026quot; }], \u0026quot;suggested_user_actions\u0026quot;: [ \u0026quot;Contact Customer Service at contact@foo.com.\u0026quot; ] } }] } Sample catalog : namespace : payment-networks { \u0026quot;namespace\u0026quot;: \u0026quot;payment-networks\u0026quot;, \u0026quot;language\u0026quot;: \u0026quot;en-US\u0026quot;, \u0026quot;errors\u0026quot;: [{ \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;VENDOR_TIMEOUT\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Transaction timed out while waiting for response from downstream service provided by a 3rd party vendor.\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 504 ], \u0026quot;suggested_application_actions\u0026quot;: [ \u0026quot;Retry again later.\u0026quot; ] } }, { \u0026quot;error_spec\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;INTERNAL_TIMEOUT\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Internal error due to timeout. Request took too long to process. The status of the transaction is unknown.\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;ERROR\u0026quot;, \u0026quot;http_status_codes\u0026quot;: [ 500 ], \u0026quot;suggested_application_actions\u0026quot;: [ \u0026quot;Contact Customer Service at contact@foo.com and provide Correlation-Id and debug_id for diagnosis along with other details.\u0026quot; ] } }] } This section describes how to version APIs. It describes API\u0026rsquo;s lifecycle states, enumerates versioning policy, describes backwards compatiblity related guidelines and describes an End-Of-Life policy.\nFollowing is an example of states of an API\u0026rsquo;s lifecycle.\n   State Description     PLANNED API has been scheduled for development. API release plans have been established.   BETA API is operational and is available to selected new subscribers in production for the purposes of testing, validating, and rolling out a new API.   LIVE API is operational and is available to new subscribers in production. API version is fully supported.   DEPRECATED API is operational and available at runtime to existing subscribers. API version is fully supported, including bug fixes addressed in backwards compatible way. API version is not available to new subscribers.   RETIRED API is unpublished from production and no longer available at runtime to any subscribers. The footprint of all deployed applications entering this state must be completely removed from production and stage environments.    API’s are versioned products and MUST adhere to the following versioning principles.\n API specifications MUST follow the versioning scheme where where the v introduces the version, the major is an ordinal starting with 1 for the first LIVE release, and minor is an ordinal starting with 0 for the first minor release of any major release. Every time there is an incremental change to an API, whether or not backward compatible, the API specification MUST be versioned. This allows the change to be labeled, documented, reviewed, discussed, published and communicated. API endpoints MUST only reflect the major version. API specification versions reflect interface changes and MAY be separate from service implementation versioning schemes. A minor API version MUST maintain backward compatibility with all previous minor versions, within the same major version. A major API version MAY maintain backward compatibility with a previous major version.  For a given functionality set, there MUST be only one API version in the LIVE state at any given time across all major and minor versions. This ensures that subscribers always understand which versioned API product they should be using. For example, v1.2 RETIRED, v1.3 DEPRECATED, or v2.0 LIVE.\nAPIs SHOULD be designed in a forward and extensible way to maintain compatibility and avoid duplication of resources, functionality and excessive versioning.\nAPIs MUST adhere to the following principles to be considered backwards compatible:\n All changes MUST be additive. All changes MUST be optional. Semantics MUST NOT change. Query-parameters and request body parameters MUST be unordered. Additional functionality for an existing resource MUST be implemented either:  As an optional extension, or As an operation on a new child resource, or By altering a request body, while still accepting all the previous, existing request variations, if an existing operation (e.g., resource creation) cannot be reasonably extended.    URIs A resource URI MAY support additional query parameters but they CANNOT be mandatory. There MUST NOT be any change in the behavior of the API for request URIs without the newly added query parameters. A new parameter with a required constraint SHALL NOT be added to a request. The semantics of an existing parameter, entire representation, or resource SHOULD NOT be changed. A service MUST recognize a previously valid value for a parameter and SHOULD NOT throw an error when used. There MUST NOT be any change in the HTTP status codes returned by the URIs. There MUST NOT be any change in the HTTP verbs (e.g. GET, POST, PUT or PATCH) supported earlier by the URI. The URI MAY however support a new HTTP verb. There MUST NOT be any change in the name and type of the request or response headers of an URI. Additional headers MAY be added, provided they’re optional.  APIs only support media type application/json. The following applies for JSON representation stability. An existing property in a JSON object of an API response MUST continue to be returned with same name and JSON type (number, integer, string, array, object). If the value of a response field is an array, then the type of the contents in the array MUST NOT change. If the value of the response field is an object, then the compatibility policy MUST apply to the JSON object as a whole. New properties MAY be added to a representation any time, but it SHOULD NOT alter the meaning of an existing property. New properties that are added MUST NOT be mandatory. Mandatory fields are guaranteed to be present in the response. For primitive types, unless there is a constraint described in the API documentation (e.g. length of the string, possible values for an ENUM type), clients MUST not assume that the values are constrained in any way. If the property of an object is a URI, then it MUST have the same stability mentioned as URIs. For an API returning HATEOAS links as part of the representation, the values of rel and href MUST remain the same. For ENUM types, there MUST NOT be any change in already supported enumerated values or meaning of these values.  The End-of-Life (EOL) policy regulates how API versions move from the LIVE to the RETIRED state. It is designed to ensure a consistent and reasonable transition period for API customers who need to migrate from the old to the new API version while enabling a healthy process to retire technical debt.\nMinor API Version EOLPer versioning policy, minor API versions MUST be backwards compatible with preceding minor versions within the same major version. Thus, minor API versions are RETIRED immediately after a newer minor version of the same major version becomes LIVE. This change should have no impact on existing subscribers so there is no need to transition through a DEPRECATED state to facilitate client migration.\nMajor API Version EOLPer versioning policy, major API versions MAY be backwards compatible with preceding major versions. As such, the following rules apply when retiring a major API version.\n A major API version MUST NOT be in the DEPRECATED state until a replacement service is LIVE that provides a clear customer migration path for all functionality that will be retained moving forward. This SHOULD include documentation and, as appropriate, migration tools and sample code that provide customers what they need to make a clean migration. The deprecated API version MUST be in the DEPRECATED state for a minimum period of time to give client customers adequate notice to migrate. Deprecation of API versions with external clients SHOULD be considered on a case-by-case basis and may require additional deprecation time and/or constraints to minimize impact to the business. If a versioned API in LIVE or DEPRECATED state has no clients, it MAY move to the RETIRED state immediately.  Since a new major API version that results in deprecation of a pre-existing API version is a significant business investment decision, API owners MUST justify the new major version before beginning significant design and development work. API owners SHOULD explore all possible alternatives to introducing a new major API version with the objective of minimizing the impact on customers before deciding to introduce a new version. Justification SHOULD include the following:\nBusiness Case\n Customer value delivered by new version that is not possible with existing version. Cost-benefit analysis of deprecated version versus the new version. Explanation of alternatives to introducing an new major version and why those were not chosen. If a backwards incompatible change is required to address a critical security issue, items 1 and 2 (above) are not required.  API Design\n A domain model of all resources in the new API version and how they compare to the domain model of the previous major API version. Description of APIs operations and use cases they implement. Definition of service level objectives for performance and availability that are equal or better to the major API version to be deprecated.  Migration Strategy\n Number of existing customers impacted; internal, external, and partners. Communication and support plan to inform existing customers of new version, value, and migration path.  This document describes a solution to deprecate parts of an API as the API evolves. It is an extension to the API Versioning Policy.\nThe term API Element is used throughout this document to refer to the things that could be deprecated in an API. Examples of an API Element are: an endpoint, a query parameter, a path parameter, a property within a JSON Object schema, JSON Object schema of a type or a custom HTTP header among other things.\nThe term old API is used to indicate existing minor or major version of your API or an existing different API that your API supersedes.\nThe term new API is used to indicate a new minor or major version of your API or a new different API that supersedes the old API.\nAPI definition is in the form of specification of an interface of a service following the OpenAPI. API\u0026rsquo;s definition could be found in swagger.json.\nWhen defining your API, you must make a lot of material decisions that have long lasting implications. The objective is to make a long-lived, durable, and reusable API. You are trying to get it \u0026ldquo;right\u0026rdquo;. Practically speaking, however, you are not going to succeed every time. New requirements come in. Your understanding of the problem changes. What probably looked like a good decision at the time, may now limit your ability to elegantly extend your API to satisfy your new understanding. Lightweight decisions made in the past now seem somewhat heavy as the implications come into focus. Maintaining backward compatibility is a persistent challenge.\nOne option is to create a new major version of your API. This allows you to leave past decisions behind and start fresh. Unfortunately, it also means that all of your clients now need to migrate to new endpoints for any of the new work to deliver customer value. This is hard. Many clients will not move without good incentives. There is a lot of overhead in managing the customer migration. You also need to support two sets of interfaces for quite some time. The other consideration is that your API product may have multiple endpoints, but the breaking changes that you want to make only affect one. Making your customers migrate their applications for all the API endpoints just so you can “fix” one small part is a pretty heavyweight and expensive change. While pure and simple from a philosophical and engineering point of view, it is often unjustifiable from an ROI standpoint. The goal of this guideline is to find a middle ground that provides a more practical path forward when minor changes are needed, but which is still consistent, in spirit, with the API Versioning Policy.\nHere are the requirements for deprecation.\n An API developer should be able to deprecate an API Element in a minor version of an API. An API specification MUST highlight one or more deprecated elements of the API so the API consumers are aware. An API server MUST inform client app(s) regarding deprecated elements present in request and/or response at runtime so that tools can recognize this, log warnings and highlight the usage of deprecated elements as needed. Deprecated API Elements must remain supported for the life of the major version or until customers are no longer using them (the means to determine this are left to the discretion of the API owner since it\u0026rsquo;s their customers who will ultimately be impacted).  The following describes how to address the requirements listed above. The solution involves addressing documentation related requirement using an annotation and using a custom header to address the runtime related requirement.\n Documentation Runtime  An optional annotation named x-deprecated is used to mark an API Element as deprecated in the definition of the API.\nx-deprecated can be used to deprecate any kind of API Element. The annotation should be used inline precisely where the API Element is defined. It is expected that the API tools generating documentation by introspecting the API definition would recognize this annotation and highlight the corresponding API Element as deprecated. It is also assumed that this annotation can be completely ignored by tools including those generating implementation bindings (POJO). In other words, it is not in scope of this solution that any implementation language specific construct (such as Java annotation @deprecated) would be generated for the x-deprecated annotation.\nIt is expected that the API documentation would highlight deprecated API Elements annotated by x-deprecated in the API specification distinctly and at the appropriate granularity.\nWe have provided specific JSON object types to use for deprecation of specific API Elements. This section lists schema for these types. The intent in providing schema for specific application of x-annotation is to make it easy for API developers to annotate the API definition and for API tool(s) to highlight each deprecated API Element with appropriate details.\nCommon Schema Elements Following are common schema types that are used across new JSON object types to be used for deprecation.\n \u0026quot;x-deprecatedValue\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Value of the element that is deprecated. Use to deprecate a particular value in parameter or schema property as applicable.\u0026quot; }, \u0026quot;x-deprecatedSee\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;URI (indirect or absolute) or name of to new parameter, resource, method, api_element, as applicable.\u0026quot; }, \u0026quot;x-apiVersion\u0026quot;: { \u0026quot;pattern\u0026quot;: \u0026quot;^[1-9][0-9]*[.][0-9]+$\u0026quot;, \u0026quot;minLength\u0026quot;: 3, \u0026quot;maxLength\u0026quot;: 8, \u0026quot;description\u0026quot;: \u0026quot;This string should contain the release or version number at which this schema element became deprecated. Version should be in the format '{major}.{minor}' (no leading 'v').\u0026quot; } The following schema MUST be used to deprecate resource objects in API definition. Examples of resource object in swagger.json are: operation and paths.\n\t\u0026quot;x-deprecatedResource\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Schema for a deprecated resource.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Schema for deprecating a resource API element. A resource API element could be an operation or paths.\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;see\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedSee\u0026quot; }, \u0026quot;since_version\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-apiVersion\u0026quot; } } } The following section provides several examples showing usage of deprecatedResource for x-deprecated annotation at resource level.\nThe following example shows deprecated resource named commercial-entities in swagger.json.\n \u0026quot;paths\u0026quot;: { \u0026quot;/commercial-entities\u0026quot;: { \u0026quot;x-deprecated\u0026quot;: { \u0026quot;see\u0026quot;: \u0026quot;financial-entities\u0026quot;, \u0026quot;since_version\u0026quot;: \u0026quot;1.4\u0026quot; }, ... } The following example shows a deprecated method PUT /commercial-entities/{merchant_id}/agreements and encourages to use new method PATCH /commercial-entities/{merchant_id}/agreements.\n \u0026quot;paths\u0026quot;: { \u0026quot;/commercial-entities/{merchant_id}/agreements\u0026quot;: { \u0026quot;put\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Updates the Commercial Entity Agreements Details for a Merchant.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.agreement.update\u0026quot;, \u0026quot;x-deprecated\u0026quot;: { \u0026quot;see\u0026quot;: \u0026quot;patch\u0026quot;, \u0026quot;since_version\u0026quot;: \u0026quot;1.4\u0026quot; }, \u0026quot;parameters\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;merchant_id\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;path\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;The encrypted Merchant's identifier.\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;Agreements\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;body\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;An array of AgreementDetails\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;./model/agreement_details.json\u0026quot; } } ], ... } swagger.json provides a way to define one or more parameter for a method. The type of parameters are: path, query and header. Typically, query and header parameters can be deprecated. The following schema MUST be used while using x-deprecated annotation for a parameter.\n\t\u0026quot;x-deprecatedParameter\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Schema for a deprecated parameter.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Schema for deprecating an API element inline. The API element could be a custom HTTP header or a query param.\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;value\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedValue\u0026quot; }, \u0026quot;see\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedSee\u0026quot; }, \u0026quot;since_version\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-apiVersion\u0026quot; } } } The following section provides several examples showing usage of deprecatedParameter for x-deprecated annotation at parameter level.\nThe following example shows usage of the x-deprecated annotation in swagger.json to indicate deprecation of a query parameter record_date.\n \u0026quot;/commercial-entities/{merchant_id}\u0026quot;: { \u0026quot;get\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Gets a Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Gets the Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.get\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;record_date\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;query\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;The date to use for the query; defaulted to yesterday.\u0026quot;, \u0026quot;required\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;date\u0026quot;, \u0026quot;x-deprecated\u0026quot;: { \u0026quot;since_version\u0026quot;: \u0026quot;1.5\u0026quot;, \u0026quot;see\u0026quot;: \u0026quot;transaction_date\u0026quot; } }, { \u0026quot;name\u0026quot;: \u0026quot;transaction_date\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;query\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;The date to use for the query; defaulted to yesterday.\u0026quot;, \u0026quot;required\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;date\u0026quot; }, ... The following example shows a deprecated custom HTTP header called CLIENT_INFO.\nOpenAPI  \u0026quot;/commercial-entities/{merchant_id}\u0026quot;: { \u0026quot;get\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Gets a Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Gets the Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.get\u0026quot;, \u0026quot;parameters\u0026quot;: [ ... { \u0026quot;name\u0026quot;: \u0026quot;CLIENT_INFO\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;header\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Optional header for all the API's to pass on api caller tracking information. This header helps capture any input from the caller service and pass it along to analytics for tracking .\u0026quot;, \u0026quot;in\u0026quot; : \u0026quot;header\u0026quot;, \u0026quot;x-deprecated\u0026quot;: { \u0026quot;since_version\u0026quot;: \u0026quot;1.5\u0026quot; } } ... The following example shows usage of the x-deprecated annotation in swagger.json to indicate deprecation of a specific value (y) for a query parameter named fields.\n \u0026quot;/commercial-entities\u0026quot;: { \u0026quot;get\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Gets Commercial Entities.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Gets the Commercial Entities.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.get\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;fields\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;query\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Fields to return in response, default is x, possible values are x, y, z.\u0026quot;, \u0026quot;required\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;x-deprecated\u0026quot;: { \u0026quot;since_version\u0026quot;: \u0026quot;1.5\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;y\u0026quot; } }, { \u0026quot;name\u0026quot;: \u0026quot;transaction_date\u0026quot;, \u0026quot;in\u0026quot;: \u0026quot;query\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;The date to use for the query; defaulted to yesterday.\u0026quot;, \u0026quot;required\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;date\u0026quot; }, ... In order to deprecate a schema of JSON Object itself or one or more properties within the JSON Object schema, we recommend using a schema called deprecatedSchema for the x-deprecated annotation.\n\t\u0026quot;x-deprecatedSchema\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Schema for a collection of deprecated items in a schema.\u0026quot;, \u0026quot;items\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedSchemaProperty\u0026quot; } } \t\u0026quot;x-deprecatedSchemaProperty\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Schema for a deprecated schema property or schema itself.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Schema for deprecating an API element within JSON Object schema. The API element could be an individual property of a schema of a JSON type or an entire schema representing JSON object.\u0026quot;, \u0026quot;required\u0026quot;: [\u0026quot;api_element\u0026quot;], \u0026quot;properties\u0026quot;: { \u0026quot;api_element\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;JSON pointer to API element that is deprecated. If the API element is JSON Object schema of a type itself, JSON pointer MUST point to the root of that schema. If the API element is a property of schema, the JSON pointer MUST point to that property.\u0026quot; }, \u0026quot;value\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedValue\u0026quot; }, \u0026quot;see\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-deprecatedSee\u0026quot; }, \u0026quot;since_version\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;#/definitions/x-apiVersion\u0026quot; } } } In order to avoid extending JSON draft-04 schema with keywords needed to either deprecate the schema itself by using x-annotation in metadata section of the schema or deprecate individual properties inline, we have chosen a less disruptive route of using x-annotation next to references for JSON Object in API definition. Therefore, this annotation SHOULD be used in API definition where schema is \u0026ldquo;referred\u0026rdquo;. In case if you are OK with inlining, you should go ahead and annotate individual deprecated properties in schema or schema itself.\nAs of March 2017, OpenAPI 3.0.0-rc0 has introduced deprecated flag to apply at operation, parameter and schema field levels. x-annotation could be used alongside the deprecated flag to provide additional useful information for the deprecated API Element.\nThe following example shows usage of the x-deprecated annotation in API definitions to indicate deprecation of a property named address in response.\n \u0026quot;/commercial-entities/{merchant_id}\u0026quot;: { \u0026quot;get\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Gets a Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Gets the Commercial Entity as denoted by the merchant_id.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.get\u0026quot;, \u0026quot;responses\u0026quot;: { \u0026quot;200\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;The Commercial Entity.\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;./model/interaction/commercial-entities/merchant_id/get_response.json\u0026quot;, \u0026quot;x-deprecated\u0026quot;: [ { \u0026quot;api_element\u0026quot;: \u0026quot;./model/interaction/commercial-entities/merchant_id/get_response.json#/address\u0026quot;, \u0026quot;see\u0026quot;: \u0026quot;./model/interaction/commercial-entities/merchant_id/get_response.json#/global_address\u0026quot;, \u0026quot;since_version\u0026quot;: \u0026quot;1.4\u0026quot; } ] } }, \u0026quot;default\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Unexpected error\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/error.json\u0026quot; } } } The following example shows usage of the x-deprecated annotation in API definitions to indicate deprecation of an enum FAILED used by a property named state.\n \u0026quot;/commercial-entities/{merchant_id}\u0026quot;: { \u0026quot;get\u0026quot;: { \u0026quot;summary\u0026quot;: \u0026quot;Gets a Commercial Entity as denoted by the specified merchant identifier.\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Gets the Commercial Entity as denoted by the specified merchant identifier.\u0026quot;, \u0026quot;operationId\u0026quot;: \u0026quot;commercial-entity.get\u0026quot;, \u0026quot;responses\u0026quot;: { \u0026quot;200\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;The Commercial Entity.\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;./model/interaction/commercial-entities/merchant_id/get_response.json\u0026quot;, \u0026quot;x-deprecated\u0026quot;: [ { \u0026quot;api_element\u0026quot;: \u0026quot;./model/interaction/commercial-entities/merchant_id/get_response.json#/state\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;FAILED\u0026quot;, \u0026quot;since_version\u0026quot;: \u0026quot;1.4\u0026quot; } ] } }, \u0026quot;default\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;Unexpected error\u0026quot;, \u0026quot;schema\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;v1/schema/json/draft-04/error.json\u0026quot; } } } The API server MUST inform client app(s) of the deprecated API element(s) present in request and/or response.\nIt is recommended to use a custom HTTP header named Foo-Deprecated to convey deprecation related information. The service MUST respond with the Foo-Deprecated header in the following cases:\n The caller has used one or more deprecated element in request. There is one or more deprecated element in the response.  In order to avoid bloating the responses with static information related to deprecation that does not change from response to response on the same end point, we recommend that API developers provide just an empty JSON object as a value as shown below. In the future, we plan to replace this with something that still does not bloat the responses but still provides enough information so that tools could scan responses for deprecation and take appropriate actions such as notifying App developers/administrators.\n\u0026quot;Foo-Deprecated\u0026quot;: \u0026quot;{}\u0026quot; Note: Applications consuming this header MUST not take any action based on the value of the header at this time. Instead, we recommend that these applications SHOULD take action based only on the existence of the header in the response.\nReferences\n JEP Enhanced Deprecation How and When to Deprecate APIs Semantic Versioning 2.0  Please refer to Patterns And Use Cases.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/patterns/",
	"title": "API Patterns",
	"tags": [],
	"description": "",
	"content": " This original content was originated published at: https://github.com/paypal/api-standards/blob/master/patterns.md Thanks PayPal for such great reference, that can help many developer around the world.\n API Design Patterns And Use Cases This document lists various useful patterns for API design. We encourage API developers to consider the following patterns as a guide while designing APIs for services.\nDocument Semantics, Formatting, and Naming The key words \u0026ldquo;MUST\u0026rdquo;, \u0026ldquo;MUST NOT\u0026rdquo;, \u0026ldquo;REQUIRED\u0026rdquo;, \u0026ldquo;SHALL\u0026rdquo;, \u0026ldquo;SHALL NOT\u0026rdquo;, \u0026ldquo;SHOULD\u0026rdquo;, \u0026ldquo;SHOULD NOT\u0026rdquo;, \u0026ldquo;RECOMMENDED\u0026rdquo;, \u0026ldquo;MAY\u0026rdquo;, and \u0026ldquo;OPTIONAL\u0026rdquo; in this document are to be interpreted as described in RFC 2119.\nThe words \u0026ldquo;REST\u0026rdquo; and \u0026ldquo;RESTful\u0026rdquo; MUST be written as presented here, representing the acronym as all upper-case letters. This is also true of \u0026ldquo;JSON,\u0026rdquo; \u0026ldquo;XML,\u0026rdquo; and other acronyms.\nMachine-readable text, such as URLs, HTTP verbs, and source code, are represented using a fixed-width font.\nURIs containing variable blocks are pecified according to URI Template RFC 6570. For example, a URL containing a variable called account_id would be shown as https://paypal.com/accounts/{account_id}/.\nHTTP headers are written in camelCase + hyphenated syntax, e.g. Foo-Request-Id.\nContributors Sanjay Dalal (former member: PayPal API Platform), Jason Harmon (former member: PayPal API Platform), Jayadeba Jena (PayPal API Platform), Nikhil Kolekar (PayPal API Platform), Gagan Maheshwari (former member: PayPal API Platform), George Petkov (former member: PayPal API Platform) and Andrew Todd (PayPal Credit).\nTable Of Contents  Create Resource Collection Resource  Time Selection Sorting Pagination Query Parameters  Response Properties Page Navigation     Read Single Resource Delete Single Resource Update Single Resource  Partially Update Single Resource JSON Pointer Expression   Projected Response Sub-resource Collection Sub-resource Singleton Idempotency Asynchronous Operations Controller Resources  Complex Operation - Sub-resource Complex Operation - Composite Complex Operation - Transient Complex Operation - Search   Resource-Oriented Alternative File Upload  Standalone Operation As Attachment   HATEOAS Use Cases  Navigating A Collection Error Resolution Service Controlled Flow Asynchronous Operations Saving Bandwidth   Bulk Operations  Request Format Response Format Replace and Update Operation HTTP Status Codes and Error Handling   Other Patterns  For creating a new resource, use POST method. The request body for POST may be somewhat different than for GET/PUT response/request (typically fewer fields as the server will generate some values). In most cases, the service produces an identifier for the resource. In cases where identifier is supplied by the API consumer, use Create New Resource - Client Supplied ID\nOnce the POST has successfully completed, a new resource will be created. Hypermedia links provide an easy way to get the URL of the newly created resource, using the rel: self, in addition to other links for operations that are allowed on the newly created resource. You may provide complete representation of the resource or partial with just HATEOAS links to retrieve the complete representation.\nURI Template \tPOST /{version}/{namespace}/{resource} Example Request Note that server-generated values are not provided in the request.\nPOST /v1/vault/credit-cards { \u0026quot;payer_id\u0026quot;: \u0026quot;user12345\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;visa\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;4417119669820331\u0026quot;, \u0026quot;expire_month\u0026quot;: \u0026quot;11\u0026quot;, \u0026quot;expire_year\u0026quot;: \u0026quot;2018\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;Betsy\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Buyer\u0026quot;, \u0026quot;billing_address\u0026quot;: { \u0026quot;line1\u0026quot;: \u0026quot;111 First Street\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Saratoga\u0026quot;, \u0026quot;country_code\u0026quot;: \u0026quot;US\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;CA\u0026quot;, \u0026quot;postal_code\u0026quot;: \u0026quot;95070\u0026quot; } } Example Response On successful execution, the method returns with status code 201.\n201 Created { \u0026quot;id\u0026quot;: \u0026quot;CARD-1MD19612EW4364010KGFNJQI\u0026quot;, \u0026quot;valid_until\u0026quot;: \u0026quot;2016-05-07T00:00:00Z\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;ok\u0026quot;, \u0026quot;payer_id\u0026quot;: \u0026quot;user12345\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;visa\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;xxxxxxxxxxxx0331\u0026quot;, \u0026quot;expire_month\u0026quot;: \u0026quot;11\u0026quot;, \u0026quot;expire_year\u0026quot;: \u0026quot;2018\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;Betsy\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Buyer\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.sandbox.paypal.com/v1/vault/credit-cards/CARD-1MD19612EW4364010KGFNJQI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.sandbox.paypal.com/v1/vault/credit-cards/CARD-1MD19612EW4364010KGFNJQI\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;delete\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;DELETE\u0026quot; } ] } When an API consumer provides the resource identifier, PUT method SHOULD be utilized, as the operation is idempotent, even during creation.\nThe same interaction as Create Resource is used here. 201 + response body on resource creation, and 204 + no response body when an existing resource is updated.\nA collection resource should return a list of representation of all of the given resources (instances), including any related metadata. An array of resources should be in the items field. Consistent naming of collection resource fields allow API clients to create generic handling for using the provided data across various resource collections.\nThe GET verb should not affect the system, and should not change response on subsequent requests (unless the underlying data changes), i.e. it should be idempotent. Exceptions to \u0026lsquo;changing the system\u0026rsquo; are typically instrumentation/logging-related.\nThe list of data is presumed to be filtered based on the privileges available to the API client. In other words, it should not be a list of all resources in the domain. It should only be resources for which the client has authorization to view within its current context.\nProviding a summarized, or minimized version of the data representation can reduce the bandwidth footprint, in cases where individual resources contain a large object.\nIf the service allows partial retrieval of the set, the following patterns MUST be followed.\nQuery parameters with regard to time range could be used to select a subset of items in the following manner:\n start_time or {property_name}_after: A timestamp (in either Unix time or ISO-8601 format) indicating the start of a temporal range. start_time may be used when there is only one unambiguous time dimension; otherwise, the property name should be used (e.g., processed_after, updated_after). The property SHOULD map to a time field in the representation. end_time or {property_name}_before: A timestamp (in either Unix time or ISO-8601 format) indicating the end of a temporal range. end_time may be used when there is only one unambiguous time dimension; otherwise, the property name should be used (e.g., processed_before, updated_before). The property SHOULD map to a time field in the representation.  Results could be ordered according to sorting related instructions given by the client. This includes sorting by a specific field\u0026rsquo;s value and sorting order as described in the query parameters below.\n sort_by: A dimension by which items should be sorted; the dimensions SHOULD be an attribute in the item\u0026rsquo;s representation; the default (ascending or descending) is left to the implementation and MUST be specified in the documentation. sort_order: The order, one of asc or desc, indicating ascending or descending order.  Any resource that could return a large, potentially unbounded list of resources in its GET response SHOULD implement pagination using the patterns described here.\nSample URI path: /accounts?page_size={page_size}\u0026amp;page={page}\nClients MUST assume no inherent ordering of results unless a default sort order has been specified for this collection. It is RECOMMENDED that service implementers specify a default sort order whenever it would be useful.\n page_size: A non-negative, non-zero integer indicating the maximum number of results to return at one time. This parameter:  MUST be optional for the client to provide. MUST have a default value, for when the client does not provide a value.   page: A non-zero integer representing the page of the results. This parameter:  MUST be optional for the client to provide. MUST have a default value of 1 for when the client does not provide a value. MUST respond to a semantically invalid page count, such as zero, with the HTTP status code 400 Bad Request. If a page number is too large\u0026ndash;for instance, if there are only 50 results, but the client requests page_size=100\u0026amp;page=3\u0026ndash;the resource MUST respond with the HTTP status code 200 OK and an empty result list.   page_token: In certain cases such as querying on a large data set, in order to optimize the query execution while paginating, querying and retrieving the data based on result set of previous page migh be appropriate. Such a page_token could be an encrypted value of primary keys to navigate next and previous page along with the directions. total_required: A boolean indicating total number of items (total_items) and pages (total_pages) are expected to be returned in the response. This parameter:  SHOULD be optional for the client to provide. SHOULD have a default value of false. MAY be used by the client in the very first request. The client MAY then cache the values returned in the response to help build subsequent requests. SHOULD only be implemented when it will improve API performance and/or it is necessary for front-end pagination display.    JSON response to a request of this type SHOULD be an object containing the following properties:\n items MUST be an array containing the current page of the result list. Unless there are performance or implementation limitations:  total_items SHOULD be used to indicate the total number of items in the full result list, not just this page.  If total_required has been implemented by an API, then the value SHOULD only be returned when total_required is set to true. If total_required has not been implemented by an API, then the value MAY be returned in every response if necessary, useful, and performant. If present, this parameter MUST be a non-negative integer. Clients MUST NOT assume that the value of total_items is constant. The value MAY change from one request to the next.   total_pages SHOULD be used to indicate how many pages are available, in total.  If total_required has been implemented by an API, then the value SHOULD only be returned when total_required is set to true. If total_required has not been implemented by an API, then the value MAY be returned in every response if necessary, useful, and performant. If present, this parameter MUST be a non-negative, non-zero integer. Clients MUST NOT assume that the value of total_pages is constant. The value MAY change from one request to the next.     links SHOULD be an array containing one or more HATEOAS link relations that are relevant for traversing the result list.     Relationship Description     self Refers to the current page of the result list.   first Refers to the first page of the result list. If you are using page_token, you may not return this link.   last Refers to the last page of the result list. Returning of this link is optional. You need to return this link only if total_required is specified as a query parameter. If you are using page_token, you may not return this link.   next Refers to the next page of the result list.   prev Refers to the previous page of the result list.    This is a sample JSON schema that returns a collection of resources with pagination:\n{ \u0026quot;id\u0026quot;: \u0026quot;plan_list:v1\u0026quot;, \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-04/schema#\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Resource representing a list of billing plans with basic information.\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;plan_list Resource\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;properties\u0026quot;: { \u0026quot;plans\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Array of billing plans.\u0026quot;, \u0026quot;items\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Billing plan details.\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;plan.json\u0026quot; } }, \u0026quot;total_items\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;readonly\u0026quot;: true, \u0026quot;description\u0026quot;: \u0026quot;Total number of items.\u0026quot; }, \u0026quot;total_pages\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;readonly\u0026quot;: true, \u0026quot;description\u0026quot;: \u0026quot;Total number of pages.\u0026quot; }, \u0026quot;links\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;, \u0026quot;items\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;http://json-schema.org/draft-04/hyper-schema#\u0026quot; } } }, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size={page_size}\u0026amp;page={page}\u0026amp;status={status}\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;rel\u0026quot;: \u0026quot;first\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size={page_size}\u0026amp;page={page}\u0026amp;start={start_id}\u0026amp;status={status}\u0026quot; }, { \u0026quot;rel\u0026quot;: \u0026quot;next\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size={page_size}\u0026amp;page={page+1}\u0026amp;status={status}\u0026quot; }, { \u0026quot;rel\u0026quot;: \u0026quot;prev\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size={page_size}\u0026amp;page={page-1}\u0026amp;status={status}\u0026quot; }, { \u0026quot;rel\u0026quot;: \u0026quot;last\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size={page_size}\u0026amp;page={last}\u0026amp;status={status}\u0026quot; } ] } This is a sample JSON response that returns a collection of resources with pagination:\n{ \u0026quot;total_items\u0026quot;: \u0026quot;166\u0026quot;, \u0026quot;total_pages\u0026quot;: \u0026quot;83\u0026quot;, \u0026quot;plans\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;P-6EM196669U062173D7QCVDRA\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;ACTIVE\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Testing1-Regular3\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Create Plan for Regular\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;FIXED\u0026quot;, \u0026quot;create_time\u0026quot;: \u0026quot;2014-08-22T04:41:52.836Z\u0026quot;, \u0026quot;update_time\u0026quot;: \u0026quot;2014-08-22T04:41:53.169Z\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans/P-6EM196669U062173D7QCVDRA\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; } ] }, { \u0026quot;id\u0026quot;: \u0026quot;P-83567698LH138572V7QCVZJY\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;ACTIVE\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Testing1-Regular4\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Create Plan for Regular\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;INFINITE\u0026quot;, \u0026quot;create_time\u0026quot;: \u0026quot;2014-08-22T04:41:55.623Z\u0026quot;, \u0026quot;update_time\u0026quot;: \u0026quot;2014-08-22T04:41:56.055Z\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans/P-83567698LH138572V7QCVZJY\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; } ] } ], \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size=2\u0026amp;page=3\u0026amp;status=active\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size=2\u0026amp;page=1\u0026amp;first=3\u0026amp;status=active\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;first\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size=2\u0026amp;page=2\u0026amp;status=active\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;prev\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size=2\u0026amp;page=4\u0026amp;status=active\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;next\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/billing-plans?page_size=2\u0026amp;page=82\u0026amp;status=active\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;last\u0026quot; } ] } A single resource is typically derived from the parent collection of resources, often more detailed than an item in the represenation of a collection resource.\nExecuting GET should never affect the system, and should not change response on subsequent requests, i.e. it should be idempotent.\nAll identifiers for sensitive data should be non-sequential, and preferably non-numeric. In scenarios where this data might be used as a subordinate to other data, immutable string identifiers should be utilized for easier readability and debugging (i.e. NAME_OF_VALUE vs 1421321).\nURI Template \tGET /{version}/{namespace}/{resource}/{resource-id} Example Request \tGET /v1/vault/customers/CUSTOMER-66W27667YB813414MKQ4AKDY Example Response { \u0026quot;merchant_customer_id\u0026quot;: \u0026quot;merchant-1\u0026quot;, \u0026quot;merchant_id\u0026quot;: \u0026quot;target\u0026quot;, \u0026quot;create_time\u0026quot;: \u0026quot;2014-10-10T16:10:55Z\u0026quot;, \u0026quot;update_time\u0026quot;: \u0026quot;2014-10-10T16:10:55Z\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;Kartik\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Hattangadi\u0026quot; } HTTP Status If the provided resource identifier is not found, the response 404 Not Found HTTP status should be returned (even with ’soft deleted’ records in data sources). Otherwise, 200 OK HTTP status should be utilized when data is found.\nIn order to enable retries (e.g., poor connectivity), DELETE is treated as idempotent, so it should always respond with a 204 No Content HTTP status. 404 Not Found HTTP status should not be utilized here, as on a second retry a client might mistakenly think the resource never existed at all. GET can be utilized to verify the resources exists prior to DELETE.\nFor a number of reasons, some data exposed as a resource MAY disappear: because it has been specifically deleted, because it expired, because of a policy (e.g., only transactions less than 2 years old are available), etc. Services MAY return a 410 Gone error to a request related to a resource that no longer exists. However, there may be significant costs associated with doing so. Service designers are advised to weigh in those costs and ways to reduce them (e.g., using resource identifiers that can be validated without access to a data store), and MAY return a 404 Not Found instead if those costs are prohibitive.\nURI Template \tDELETE /{version}/{namespace}/{resource}/{resource-id} Example Request \tDELETE /v1/vault/customers/CUSTOMER-66W27667YB813414MKQ4AKDY 204 No Content To perform an update to an entire resource, PUT method MUST be utilized. The same response body supplied in the resource\u0026rsquo;s GET should be provided in the resource\u0026rsquo;s PUT request body.\nIf the update is successful, a 204 No Content HTTP status code (with no response body) is appropriate. Where there is a justifying use case (typically to optimize some client interaction), a 200 OK HTTP status code with a response body can be utilized.\nWhile the entire resource\u0026rsquo;s representation must be supplied with the PUT method, the APIs validation logic can enforce constraints regarding fields that are allowed to be updated. These fields can be specified as readOnly in the JSON schema. Fields in the request body can be optional or ignored during deserialization, such as create_time or other system-calculated values. Typical error handling, utilizing the 400 Bad Request status code, should be applied in cases where the client attempts to update fields which are not allowed or if the resource is in a non-updateable state.\nSee Sample Input Validation Error Response for examples of error handling.\nURI Template PUT /{version}/{namespace}/{resource}/{resource-id} Example Request PUT /v1/vault/customers/CUSTOMER-66W27667YB813414MKQ4AKDY { \u0026quot;merchant_customer_id\u0026quot;: \u0026quot;merchant-1\u0026quot;, \u0026quot;merchant_id\u0026quot;: \u0026quot;target\u0026quot;, \u0026quot;create_time\u0026quot;: \u0026quot;2014-10-10T16:10:55Z\u0026quot;, \u0026quot;update_time\u0026quot;: \u0026quot;2014-10-10T16:10:55Z\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;Kartik\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Hattangadi\u0026quot; } HTTP Status Any failed request validation responds 400 Bad Request HTTP status. If clients attempt to modify read-only fields, this is also a 400 Bad Request.\nIf there are business rules (more than simple data-type or length constraints), it is best to provide a specific error code and message (in addition to the 400) for that validation.\nFor situations which require interaction with APIs or processes outside of the current request, the 422 status code is appropriate.\nAfter successful update, PUT operations should respond with 204 No Content status, with no response body.\nOften, previously created resources need to be updated based on customer or facilitator-initiated interactions (like adding items to a cart). In such cases, APIs SHOULD provide an RFC 6902 JSON Patch compatible solution. JSON patches use the HTTP PATCH method defined in RFC 5789 to enable partial updates to resources.\nA JSON patch expresses a sequence of operations to apply to a target JSON document. The operations defined by the JSON patch specification include add, remove, replace, move, copy, and test. To support partial updates to resources, APIs SHOULD support add, remove and replace operations. Support for the other operations (move, copy, and test) is left to the individual API owner based onneeds.\nBelow is a sample PATCH request to do partial updates to a resource:\nPATCH /v1/namespace/resources/:id HTTP/1.1 Host: api.foo.com Content-Length: 326 Content-Type: application/json-patch+json If-Match: \u0026quot;etag-value\u0026quot; [ { \u0026quot;op\u0026quot;: \u0026quot;remove\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/a/b/c\u0026quot; }, { \u0026quot;op\u0026quot;: \u0026quot;add\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/a/b/c\u0026quot;, \u0026quot;value\u0026quot;: [ \u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot; ] }, { \u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/a/b/c\u0026quot;, \u0026quot;value\u0026quot;: 42 } ] The value of path is a string containing a RFC 6901 JSON Pointer] that references a location within the target document where the operation is performed. For example, the value /a/b/c refers to the element c in the sample JSON below:\n{ \u0026quot;a\u0026quot;: { \u0026quot;b\u0026quot;: { \u0026quot;c\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;d\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;e\u0026quot;: \u0026quot;\u0026quot; } } path Parameter When JSON Pointer is used with arrays, concurrency protection is best implemented with ETags.\nIn many cases, ETags are not an option:\n It is expensive to calculate ETags because the API collates data from multiple data sources or has very large response objects. The response data are frequently modified.  In cases where ETags are not available to provide concurrency protection when updating arrays, PayPal has created an extension to RFC 6901 which provides expressions of the following form.\n\u0026quot;path\u0026quot;: \u0026quot;/object-name/@filter-expression/attribute-name\u0026quot;\n object-name is the name of the collection.The symbol “@” refers to the current object. It also signals the beginning of a filter-expression. The filter-expression SHOULD only contain the following operators: a comparison operator (== for equality) or a Logical AND (\u0026amp;\u0026amp;) operator or both. For example:”/address/@id==123/street_name”, “address/@id==123 \u0026amp;\u0026amp; primary==true” are valid filter expressions. The right hand side operand for the operator “==” MUST have a value that matches the type of the left hand side operand. For example: “addresss/@integer_id == 123”,”/address/@string_name == ‘james’”,”/address/@boolean_primary == true”,/address/@decimal_number == 12.1 are valid expressions. If the right hand operand of \u0026ldquo;==\u0026rdquo; is a string then it SHOULD NOT contain any of the following escape sequences: a Line Continuation or a Unicode Escape Sequence. attribute-name is the name of the attribute to which a PATCH operation is applied if the filter condition is met.  Example1:\n\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;,\u0026quot;path\u0026quot;: “/address/@id==12345/primary”,\u0026quot;value\u0026quot;: trueThis would set the array element \u0026ldquo;primary\u0026rdquo; to true if the the element \u0026ldquo;id\u0026rdquo; has a value \u0026ldquo;12345\u0026rdquo;.Example2:\n\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;,\u0026quot;path\u0026quot;: “/address/@country_code==’GB’ \u0026amp;\u0026amp; type==’office’/active”,\u0026quot;value\u0026quot;: trueThis would set the array element \u0026ldquo;active\u0026rdquo; to true if the the element \u0026ldquo;country_code\u0026rdquo; equals to \u0026ldquo;GB\u0026rdquo; and type equals to \u0026ldquo;office\u0026rdquo;.\nIt is not necessary that an API support the updating of all attributes via a PATCH operation. An API implementer SHOULD make an informed decision to support PATCH updates only for a subset of attributes through a specific resource operation.\n  Note that the operations are applied sequentially in the order they appear in the payload. If the update is successful, a 204 No Content HTTP status code (with no response body) is appropriate. Where there is a justifying use case (typically to optimize some client interaction) and the request has the header Prefer:return=representation, a 200 OK HTTP status code with a response body can be utilized.\n  Responses body with 200 OK SHOULD return the entire resource representation unless the client uses the fields parameter to reduce the response size.\n  If a PATCH request results in a new resource state that is invalid, the API SHOULD return a 400 Bad Request or 422 Unprocessable Entity.\n  See Sample Input Validation Error Response for examples of error handling.\nPATCH examples for modifying objects can be found in RFC 6902.\nAn API typically responds with full representation of a resource after processing requests for methods such as GET. For efficiency, the client can ask the service to return partial representation using Prefer: return=minimal HTTP header. Here, The determination of what constitutes an appropriate \u0026ldquo;minimal\u0026rdquo; response is solely at the discretion of the service.\nTo request partial representation with specific field(s), a client can use the fields query parameter. For selecting multiple fields, a comma-separated list of fields SHOULD be used.\nThe following example shows the use of the fields parameter with users API.\nRequest: HTTP GET without fields parameter\nGET https://api.foo.com/v1/users/bob Authorization: Bearer your_auth_token Response: The complete resource representation is returned in the response.\n{ \u0026quot;uid\u0026quot;: \u0026quot;dbrown\u0026quot;, \u0026quot;given_name\u0026quot;: \u0026quot;David\u0026quot;, \u0026quot;sn\u0026quot;: \u0026quot;Brown\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;Austin\u0026quot;, \u0026quot;department\u0026quot;: \u0026quot;RISK\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Manager\u0026quot;, \u0026quot;manager\u0026quot;: \u0026quot;ipivin\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;dbrown@foo.com\u0026quot;, \u0026quot;employeeId\u0026quot;: \u0026quot;234167\u0026quot; } Projected response to GET with the fields query parameter. Request:\n GET https://api.foo.com/v1/users/bob?fields=department,title,location Authorization: Bearer your_auth_token The response has only fields specified by the fields query parameter as well as mandatory fields.\nResponse:\n200 OK { \u0026quot;uid\u0026quot;: \u0026quot;dbrown\u0026quot;, \u0026quot;department\u0026quot;: \u0026quot;RISK\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Manager\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;Austin\u0026quot; } You could use the same pattern for Collection Resource as well as following.\nGET https://api.foo.com/v1/users?fields=department,title,location The response will have entries with the fields specified in request as well as mandatory fields.\nSometimes, multiple identifiers are required (\u0026lsquo;composite keys\u0026rsquo;, in the database lexicon) to identify a given resource. In these scenarios, all behaviors of a Collection Resource are implemented, as a subordinate of another resource. It is always implied that the resource-id in the URL must be the parent of the sub-resources.\nCautions  The need to maintain multiple identifiers can create a burden on client developers.  Look for opportunities to promote resources with unique identifiers (i.e. there is no need to identify the parent resource) to a first-level resource.   Caution should be used in identifying the name of the sub-resource, as to not interfere with the identifier naming conventions of the base resource. In other words, /{version}/{namespace}/{resource}/{resource-id}/{sub-resource-id} is not appropriate, as the sub-resource-id has ambiguous meaning. Two levels is a practical limit for resource identifiers  API client usability suffers, as the need for clients to maintain state about identifier hierarchy increases complexity. Server developers must validate each level of identifiers in order to verify that they are allowed access, and that they relate to each other, thus increasing risk and complexity.    Note these templates/examples are brief: for more detail on the Collection Resource style, see above. Although this section explains the sub-resource collection, all interactions should be the same, simply with the addition of a parent identifier.\nURI Templates POST /{version}/{namespace}/{resource}/{resource-id}/{sub-resource} GET /{version}/{namespace}/{resource}/{resource-id}/{sub-resource} GET /{version}/{namespace}/{resource}/{resource-id}/{sub-resource}/{sub-resource-id} PUT /{version}/{namespace}/{resource}/{resource-id}/{sub-resource}/{sub-resource-id} DELETE /{version}/{namespace}/{resource}/{resource-id}/{sub-resource}/{sub-resource-id}  Examples GET /v1/notifications/webhooks/{webhook-id}/event-types POST /v1/factory/widgets/PART-4312/sub-assemblies GET /v1/factory/widgets/PART-4312/sub-assemblies/INNER-COG PUT /v1/factory/widgets/PART-4312/sub-assemblies/INNER-COG DELETE /v1/factory/widgets/PART-4312/sub-assemblies/INNER-COG  When a sub-resource has a one-to-one relationship with the parent resource, it could be modeled as a singleton sub-resource. This approach is usually used as a means to reduce the size of a resource, when use cases support segmenting a large resource into smaller resources.\nFor a singleton sub-resource, the name should be a singular noun. As often as possible, that single resource should always be present (i.e. does not respond with 404).\nThe sub-resource should be owned by the parent resource; otherwise this sub-resource should probably be promoted to its own collection resource, and relationships represented with sub-resource collections in the other direction. Sub-resource singletons should not duplicate a resource from another collection.\nIf the singleton sub-resource needs to be created, PUT should be used, as the operation is idempotent, on creation or update. PATCH can be used for partial updates, but should not be available on creation (in part because it is not idempotent).\nThis should not be used as a mechanism to update single or subsets of fields with PUT. The resource should remain intact, and PATCH should be utilized for partial update. Creating sub-resource singletons for each use case of updates is not a scalable design approach, as many endpoints could result long-term.\nURI Template GET/PUT /{version}/{namespace}/{resource}/{resource-id}/{sub-resource}  Examples GET /v1/customers/devices/DEV-FDU233FDSE213f)/vendor-information  Idempotency is an important aspect of building a fault-tolerant API. Idempotent APIs enable clients to safely retry an operation without worrying about the side-effects that the operation can cause. For example, a client can safely retry an idempotent request in the event of a request failing due to a network connection error.\nPer HTTP Specification, a method is idempotent if the side-effects of more than one identical requests are the same as those for a single request. Methods GET, HEAD, PUT and DELETE (additionally, TRACE and OPTIONS) are defined idempotent.\nPOST operations by definition are neither safe nor idempotent.\nAll service implementations MUST ensure that safe and idempotent behaviour of HTTP methods is implemented as per HTTP specifications. Services that require idempotency for POST operations MUST be implemented as per the following guidelines.\nPOST operations by definition are not idempotent which means that executing POST more than once with the same input creates as many resources. To avoid creation of duplicate resources, an API SHOULD implement the protocol defined in the section below. This guarantees that only one record is created for the same input payload.\nFor many use cases that require idempotency for POST requests, creation of a duplicate record is a severe problem. For example, duplicate records for the use cases that create or execute a payment on an account are not allowed by definition.\nTo track an idempotent request, a unique idempotency key is used and sent in every request. Define a header and use its value as idempotency key for every request.\nFor the very first request from the client:\nOn the client side:\nThe API client sends a new POST request with the Foo-Request-Id header that contains the idempotency key.\nPOST /v1/payments/referenced-payouts-items HTTP/1.1 Host: api.foo.com Content-Type: application/json Authorization: Bearer oauth2_token Foo-Request-Id: 123e4567-e89b-12d3-a456-426655440000 { \u0026quot;reference_id\u0026quot;: \u0026quot;4766687568468\u0026quot;, \u0026quot;reference_type\u0026quot;: \u0026quot;egflf465vbk7468mvnb\u0026quot; } On the server side:\nIf the call is successful and leads to a resource creation, the service MUST return a 201 response to indicate both success and a change of state.\nSample response:\nHTTP/1.1 201 CREATED Content-Type: application/json { \u0026quot;item_id\u0026quot;: \u0026quot;CDZEC5MJ8R5HY\u0026quot;, \u0026quot;links\u0026quot;: [{ \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/referenced-payouts-items/CDZEC5MJ8R5HY\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }] } The service MAY send back the idempotency key as part of Foo-Request-Id header in the response.\nFor subsequent requests from the client with same input payload:\nOn the client side:\nThe API client sends a POST request with the same idempotency key and input body as before.\nPOST /v1/payments/referenced-payouts-items HTTP/1.1 Host: api.foo.com Content-Type: application/json Authorization: Bearer oauth2_token Foo-Request-Id: 123e4567-e89b-12d3-a456-426655440000 { \u0026quot;reference_id\u0026quot;: \u0026quot;4766687568468\u0026quot;, \u0026quot;reference_type\u0026quot;: \u0026quot;egflf465vbk7468mvnb\u0026quot; } On the server side:\nThe server, after checking that the call is identical to the first execution, MUST return a 200 response with a representation of the resource to indicate that the request has already been processed successfully.\nSample response:\nHTTP/1.1 200 OK Content-Type: application/json { \u0026quot;item_id\u0026quot;: \u0026quot;CDZEC5MJ8R5HY\u0026quot;, \u0026quot;processing_state\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;PROCESSING\u0026quot; }, \u0026quot;reference_id\u0026quot;: \u0026quot;4766687568468\u0026quot;, \u0026quot;reference_type\u0026quot;: \u0026quot;egflf465vbk7468mvnb\u0026quot;, \u0026quot;payout_amount\u0026quot;: { \u0026quot;currency_code\u0026quot;: \u0026quot;USD\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2.0\u0026quot; }, \u0026quot;payout_destination\u0026quot;: \u0026quot;9C8SEAESMWFKA\u0026quot;, \u0026quot;payout_transaction_id\u0026quot;: \u0026quot;35257aef-54f7-43cf-a258-3b45caf3293\u0026quot;, \u0026quot;links\u0026quot;: [{ \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/referenced-payouts-items/CDZEC5MJ8R5HY\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }] } The idempotency key that is supplied as part of every POST request MUST be unique and can not be reused with another request with a different input payload. See error scenarios described below to understand the server behavior for repeating idempotency keys in requests.\nHow to make the key unique is up to the client and it\u0026rsquo;s agreed protocol with the server. It is recommended that UUID or a similar random identifier be used as the idempotency key. It is also recommended that the server implements the idempotency keys to be time-based and, thus, be able to purge or delete a key upon its expiry.\n If the Foo-Request-Id header is missing for an idempotent request, the service MUST reply with a 400 error with a link pointing to the public documentation about this pattern. If there is an attempt to reuse an idempotency key with a different request payload, the service MUST reply with a 422 error with a link pointing to the public documentation about this pattern. For other errors, the service MUST return the appropriate error message.  Certain types of operations might require processing of the request in an asynchronous manner (e.g. validating a bank account, processing an image, etc.) in order to avoid long delays on the client side and prevent long-standing open client connections waiting for the operations to complete. For such use cases, APIs MUST employ the following pattern:\nFor POST requests:\n  Return the 202 Accepted HTTP response code.\n  In the response body, include one or more URIs as hypermedia links, which could include:\n The final URI of the resource where it will be available in future if the ID and path are already known. Clients can then make an HTTP GET request to that URI in order to obtain the completed resource. Until the resource is ready, the final URI SHOULD return the HTTP status code 404 Not Found.  { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;/v1/namespace/resources/{resource_id}\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }\n A temporary request queue URI where the status of the operation may be obtained via some temporary identifier. Clients SHOULD make an HTTP GET request to obtain the status of the operation which MAY include such information as completion state, ETA, and final URI once it is completed.  { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;/v1/queue/requests/{request_id}, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }\u0026quot;\n  For PUT/PATCH/DELETE/GET requests:\nLike POST, you can support PUT/PATCH/DELETE/GET to be asynchronous. The behaviour would be as follows:\n  Return the 202 Accepted HTTP response code.\n  In the response body, include one or more URIs as hypermedia links, which could include:\n A temporary request queue URI where the status of the operation may be obtained via some temporary identifier. Clients SHOULD make an HTTP GET request to obtain the status of the operation which MAY include such information as completion state, ETA, and final URI once it is completed.  { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;/v1/queue/requests/{request_id}, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }\u0026quot;\n  APIs that support both synchronous and asynchronous processing for an URI:\nAPIs that support both synchronous and asynchronous operations for a particular URI and an HTTP method combination, MUST recognize the Prefer header and exhibit following behavior:\n If the request contains a Prefer=respond-async header, the service MUST switch the processing to asynchronous mode. If the request doesn\u0026rsquo;t contain a Prefer=respond-async header, the service MUST process the request synchronously.  It is desirable that all APIs that implement asynchronous processing, also support webhooks as a mechanism of pushing the processing status to the client.\nController (aka Procedural) resources challenge the fundamental notion or concept of resource orientation where resources usually represent mapping to a conceptual set of entities or things in a domain system. However, often API developers come across a situation where they are unable to model a service executing a business process or a part of a business process as a pure RESTful service. Some examples of use cases for controller resources are:\n When it is required to execute a processing function on the server from a set of inputs (client provided input or based on data from the server\u0026rsquo;s information store or from an external information store). When it is required to combine one or more operations and execute them in an atomic fashion (aka a composite controller operation). When you want to hide a multi-step business process operation from a client to avoid unnecessary coupling between a client and server.  Risks  Design scalability  When overused, the number of URIs can grow very quickly, as all permutations of root-level action can increase rapidly over time. This can also produce configuration complexity for routing/externalization. The URI cannot be extended past the action, which precludes any possibility of sub-resources.   Testability: highly compromised in comparison to Collection Resource-oriented designs (due the lack of corresponding GET/read operations). History: the ability to retrieve history for the given actions is forced to live in another resource (e.g. /action-resource-history), or not at all.  Benefits  Avoids corrupting collection resource model with transient data (e.g. comments on state changes etc). Usability improvement: there are cases where a complex operation simplifies client interaction, where the client does not benefit from resource retrieval.  For further reading on controller concepts, please refer to section 2.6 of the RESTful Web Services Cookbook.\nBelow are the set of guidelines for modelling controller resources.\nNaming Of A Controller Resource Because a controller operation represents an action or a processing function in the server, it is more intuitive to express it using an English verb, i.e. the action itself as the resource name. Verbs such as \u0026lsquo;activate\u0026rsquo;, \u0026lsquo;cancel\u0026rsquo;, \u0026lsquo;validate\u0026rsquo;, \u0026lsquo;accept\u0026rsquo;, and \u0026lsquo;deny\u0026rsquo; are usual suspects.\nThere are many styles that you can use to define a controller resource. You can use one of the following styles when defining a controller resource.\n If the controller action is not associated with any resource context, you can express it as an independent resource at the namespace level (/v1/credit/assess-eligibility). This is typically only applicable for creating a variety of resources in an optimized operation. It is usually an anti-pattern. If the controller action is always in the context of a parent resource, then it should be expressed as a sub-resource (using a /) of the parent resource (e.g. v1/identity/external-profiles/{id}/confirm). When an action is in the context of a collection resource, express it as an independent resource at the namespace level. The controller resource name in such cases SHOULD be composed of the action (an English verb) that the controller represent and the name of the collection resource. For example, if you want to express a search operation for deposits, the controller resource SHOULD read as v1/customer/search-deposits.  Note: A controller action is a terminal resource. A sub-resource for a controller resource is thus invalid. For the same reason, you SHOULD never define a sub-resource to a controller resource. It is also important to scope a controller to the minimum possible level of nesting in order to avoid resource pollution as such resources are use case or action centric.\nHTTP Methods For Controller Resources In general, for most cases the HTTP POST method SHOULD be used as the default method for executing a controller operation.\nIn scenarios where it is desired that the response of a controller operation be cache-able, GET SHOULD be used to execute the controller. For example,you can use a GET operation (GET /calculate-shortest-path?from=x \u0026amp;to=y) to calculate the shortest path between two nodes (origin and destination). The result of the GET operation is a collection of routes and their maps so you would like to cache the map for future use (GET /retrieve).\nHTTP Status Codes For Controller Resources In general, the following response codes can be used for a controller operation.\n200- This is the default status code for any controller operation. The response MUST contain a body that describes the result of a controller operation.\n201- If the controller operation leads to creation of a resource. If a composite controller is used to create one or more resources and it is not possible to expresss them as a composite record, you MAY instead use 200 as response code.\n204- If the server declines to return anything as part of a controller action (Most of the out-of-band actions fall in this category. e.g. v1/users/{id}/notify).\nFor errors, appropriate 4XX or 5XX error codes MAY be returned.\nFollowing sections provide some examples for modeling of controller resources to carry out various kinds of complex operations.\nNOTE: Use with caution\nFor associated risks, see Controller Resource above\nThere are often situations in which a canonical resource needs to impart certain actions or state changes which are not appropriate in a PUT or PATCH. These URIs look like other Sub-Resources, but imply action.\nA good use for this pattern is when a particular state change requires a \u0026ldquo;comment\u0026rdquo; (e.g. cancellation \u0026ldquo;reason\u0026rdquo;). Adding this comment, or other data such as location, would make the GET/PUT unnecessarily include those extra fields on every request/response. This action may change the status of the given resource implicitly.\nAdditionally, when a resource identifier is required for an action, it\u0026rsquo;s best to keep it in the URL. Some actions are business processes which are not innately a resource (and in some cases might not even change resource state).\nThe response is typically 200 OK and the resource itself, if there are changes expected in the resource the consumer needs to capture. However, if no resource state change occurs, 204 No Content and no response body could also be considered appropriate.\nURI Template POST /{version}/{namespace}/{resource}/{resource-id}/{complex-operation}  Example Request POST /v1/payments/billing-agreements/I-0LN988D3JACS/suspend { \u0026quot;note\u0026quot;: \u0026quot;Suspending the agreement.\u0026quot; } Example Response 204 No Content However, when state changes are imparted in this manner, it does not mean that all state changes for the given resource should use a complex operation. Simple state transitions (i.e. changes to a status field) should still utilize PUT/PATCH. It is completely appropriate to mix patterns using PUT/PATCH on a Collection Resource + Complex Operation, as to minimize the number of operations.\nExample Request (for mixed use of PUT) PATCH /v1/payments/billing-agreements/I-0LN988D3JACS [ { \u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;description\u0026quot;: \u0026quot;New Description\u0026quot;, \u0026quot;shipping_address\u0026quot;: { \u0026quot;line1\u0026quot;: \u0026quot;2065 Hamilton Ave\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;San Jose\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;CA\u0026quot;, \u0026quot;postal_code\u0026quot;: \u0026quot;95125\u0026quot;, \u0026quot;country_code\u0026quot;: \u0026quot;US\u0026quot; } } } ] Keep in mind that if there is any need to see the history of these actions, a Sub-resource Collection is appropriate to show all of the prior executions of this action. In that case, the verb should be reified, or changed to a plural noun (e.g. \u0026lsquo;execute\u0026rsquo; would become \u0026lsquo;executions\u0026rsquo;).\nThis type of complex operation creates/updates/deletes multiple resources in one operation. This serves as both a performance and usability optimization, as well as adding better atomicity when values in the request might affect multiple resources at the same time.\nNote in the sample below, the capture and the payment are both potentially affected by refund. A PUT or PATCH operation on the capture resource would have unintended side effects on the payment resource. To encapsulate both of these changes, the \u0026lsquo;refund\u0026rsquo; action is used.\nURI Template POST /{version}/{namespace}/{action}  Example Request POST /v1/payments/captures/{capture-id}/refund Example Response { \u0026quot;id\u0026quot;: \u0026quot;0P209507D6694645N\u0026quot;, \u0026quot;create_time\u0026quot;: \u0026quot;2013-05-06T22:11:51Z\u0026quot;, \u0026quot;update_time\u0026quot;: \u0026quot;2013-05-06T22:11:51Z\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;amount\u0026quot;: { \u0026quot;total\u0026quot;: \u0026quot;110.54\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;USD\u0026quot; }, \u0026quot;capture_id\u0026quot;: \u0026quot;8F148933LY9388354\u0026quot;, \u0026quot;parent_payment\u0026quot;: \u0026quot;PAY-8PT597110X687430LKGECATA\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/refund/0P209507D6694645N\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/payment/PAY-8PT597110X687430LKGECATA\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;parent_payment\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/payments/capture/8F148933LY9388354\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;capture\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; } ] } This type of complex operation does not maintain state for the client, and creates no resources. This is about as RPC as it gets; other alternatives should be considered first.\nThis is not usually utilized in sub-resources, as a sub-resource action would typically affect the parent resource.\nHTTP status 200 OK is always appropriate. Response body contains calculated values, which could potentially change if run again.\nAs with all actions, resource-oriented alternatives should be considered first.\nURI Template POST /{version}/{namespace}/{action}  Example Request POST /v1/risk/evaluate-payment { \u0026quot;code\u0026quot;: \u0026quot;h43j5k6iop\u0026quot; }  Example Response 200 OK { \u0026quot;status\u0026quot;: \u0026quot;VALID\u0026quot; }  When Collection Resources are used, it is best to use query parameters on the collection to filter the set. However, there are some situations that demand a very complex search syntax, where query parameter filtering on a collection might present usability problems, or run up against theoretical query parameter length limitations.\nIn these situations, POST can be utilized with a request object to specify the search parameters.\nPagination Assuming pagination will be required with large response quantities, it is important to remember that the consumer will need to use POST on each subsequent page. As such, it\u0026rsquo;s important to maintain paging in the query parameters (one of the rare exceptions where POST body + query parameters are utilized).\nPaging query parameters should follow the same conventions as in Collection Resources.\nThis allows for hypermedia links to provide next, previous, first, last page relationships with paging specified in the URL.\nURI Template POST /{version}/{namespace}/{search-resource}  Example Request POST /v1/factory/widgets-search { \u0026quot;created_before\u0026quot;:\u0026quot;1975-05-13\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;ACTIVE\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Parts Inc.\u0026quot; }  Example Response 200 OK { \u0026quot;items\u0026quot;: [ \u0026lt;\u0026lt;lots of part objects here\u0026gt;\u0026gt; ] \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.sandbox.factory.io/v1/factory/widgets-search?page=2\u0026amp;page_size=10\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;next\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;POST\u0026quot; }, { \u0026quot;href\u0026quot;: \u0026quot;https://api.sandbox.factory.io/v1/factory/widgets-search?page=124\u0026amp;page_size=10\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;last\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;POST\u0026quot; }, ] }  A better pattern is to create a Collection Resource of actions and provide a history of those actions taken in GET /{actions}. This allows for future expansion of use cases around a resource model, instead of a single action-oriented, RPC-style URL.\nAdditionally, for various use cases, filtering the resource collection of historical actions is usually desirable. This also feeds well into event sourcing concepts, where the history of a given event can drive further functionality.\nCertains types of API operations require uploading a file (e.g. jpeg, png, pdf) as part of the API call. Services for such use cases, MUST not support or allow encoding the file content within a JSON body using Base64 encoding.\nFor uploading a file, one of the following options SHOULD be used.\nServices supporting such an operation SHOULD provide a separate dedicated URI for uploading and retrieving the files. Clients of such services upload the files using the file upload URI and retrieve the file metadata as part of the response to an upload operation.\nFormat of the file upload request SHOULD conform to multipart/form-data content type (RFC 2388).\nExample of a multipart/form-data request:\nThe client first uploads the file using a file-upload URI provided by the service.\n POST /v1/identity/limit-resolution-files Content-Type: multipart/form-data; boundary=--foo_bar_baz Authorization: Bearer YOUR_ACCESS_TOKEN_HERE MIME-Version: 1.0 --foo_bar_baz Content-Type: text/plain Content-Disposition: form-data; name=\u0026quot;title\u0026quot; Identity Document --foo_bar_baz Content-Type: image/jpeg Content-Disposition: form-data; filename=\u0026quot;passport.jpg\u0026quot;; name=\u0026quot;artifact\u0026quot; ...(binary bytes of the image)... --foo_bar_baz-- Sample file upload response:\nIf the file upload is successful, the server responds with the metadata of the uploaded file.\n{ \u0026quot;id\u0026quot;: \u0026quot;file_egflf465vbk7468mvnb\u0026quot;, \u0026quot;created_at\u0026quot;: 748557607545, \u0026quot;size\u0026quot; : 3457689458369, \u0026quot;url\u0026quot; : \u0026quot;https://api.foo.com/v1/files/file_egflf465vbk7468mvnb\u0026quot; \u0026quot;type\u0026quot; : \u0026quot;image/jpeg\u0026quot; } The client can use the uploaded file\u0026rsquo;s URI (received in the above response) for any subsequent operation that requires the uploaded file as shown below.\nExample Request\nPOST /v1/identity/limits-resolutions Host: api.foo.com Content-Type: application/json Authorization: Bearer oauth2_token { ... \u0026quot;identity_document_reference\u0026quot; : \u0026quot;https://api.foo.com/v1/files/file_egflf465vbk7468mvnb\u0026quot; } This option SHOULD be used if you have to combine the uploading of a file with an API request body or parameters in one API request (e.g. for the purpose of optimization or to process both the file upload and request data in an atomic manner).\nFor such use cases, the request SHOULD either use content-type multipart/mixed or multipart/related (RFC 2387). Following is an example of such a request.\nExample of a multipart/related request:\nThe first part in the below multipart request is the request metadata, while the second part contains the binary file content\nPOST /v1/identity/limits-resolutions Host: api.foo.com Content-Type: multipart/related; boundary=--foo_bar_baz Authorization: Bearer oauth2_token --foo_bar_baz Content-Type: application/json; charset=UTF-8 { ... } --foo_bar_baz Content-Type: image/jpeg [JPEG_DATA] --foo_bar_baz-- This section describes various use cases where HATEOAS could be used.\nAs a guiding principle, every API SHOULD strive for a single entry point. Any response from this entry point will have HATEOAS links using which the client can navigate to all other methods on the same resource or releated resources and sub-resources. Following are different patterns for defining such an API entry point.\nFor most APIs, there\u0026rsquo;s a natural top level object or a collection which can be the resources addressed by the entry point. For example, the API defined in the previous section has a collection resource /users which can be the entry point URI.\nA complex multi step operation always has a logical entry point. For example, you want to build an API for a credit application process that involves multiple steps- a create application step, consumer consent step (to sign, agree to terms and conditions), an approval step- the last step of a successful credit application.\n /apply-credit is the API\u0026rsquo;s entry point. All other steps would be guided by the application create step in the from of links based on the captured data. For example a successful create application step would return the link to the next state of the application process apply.sign. An unsuccessful (application with incorrect data) MAY return only a link to send only the incorrect/missing data (e.g PATCH link).  Consider an API that provides a set of independent controller style utility methods. For example, you want to build an identity API that provides the following utility methods.\n generate OTP (one time password) encrypt payload using a particular algorithm decrypt the payload, link tokens  For such cases, the API MAY provide a separate resource /actions to return links to all resources that can be served by this API.\nGET /actions in the above example would return links to other api methods (/generate-otp,/encrypt,/decrypt,/link-tokens).\nFor collection resources, a service MAY automatically provide paginated collection. Client can also specify its pagination preferences, if the query resultset is quite large. In such cases, the resultset is returned as a paginated collection with appropriate pagination related links. Client utilizes these links to navigate through the resultset back-and-forth. For more details on this linking pattern, please refer to Pagination and HATEOAS links.\nThere are often use cases where an API wants to provide additional context in case of error along with other error details (HTTP status code and error messages. See Error Standards for more). An API could return additional resource links to provide more hints on the error in order to resolve it.\nConsider an example from the /users API where the user wants to update his address details.\nRequest:\n PATCH /v1/users/ALT-JFWXHGUV7VI { \u0026quot;address\u0026quot;: { ... } } The service, however, finds that the user account is currently not active. So it responds with an error that update of this account is not possible given the current state. It also returns an HATEOAS link in the response to activate the user account.\nResponse:\nHTTP/1.1 422 Unprocessable Entity { \u0026quot;name\u0026quot;:\u0026quot;INVALID_OPERATION\u0026quot;, \u0026quot;debug_id\u0026quot;:\u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;:\u0026quot;update to an inactive account is not supported\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/customer/partner-referrals/ALT-JFWXHGUV7VI/activate\u0026quot;, \u0026quot;rel\u0026quot;: \u0026quot;activate\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;POST\u0026quot; } ] } The client can now prompt the user to first activate his account and then change his address details.\nIn a complex business operation that has one or more sub business operations and business rules govern the state transitions at run-time, using HATEOAS links to describe or emit the allowed state transitions prevents clients from embedding the service-specific business logic into their code. Loose coupling or no coupling with server\u0026rsquo;s business logic enables better evolvability for both client and server.\nFor example, an order can be cancelled when it is in a PENDING state. The order cannot be cancelled once it moves to a COMPLETED state. Following example shows how a service can use HATEOAS links to guide clients about next possible step(s) in business process.\nOrder is in PENDING state so the services returns the cancel HATEOAS link.\nRequest GET v1/checkout/orders/52181732T9513405D HTTP/1.1 Host: api.foo.com Content-Type: application/json Authorization: Bearer oauth2_token Response HTTP/1.1 200 OK Content-Type: application/json { \u0026quot;payment_details\u0026quot;:{ ... }, \u0026quot;status\u0026quot;:\u0026quot;PENDING\u0026quot;, \u0026quot;links\u0026quot;:[ { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/checkout/orders/19S86694A9334040A\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; }, { \u0026quot;rel\u0026quot;: \u0026quot;cancel\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/checkout/orders/19S86694A9334040A/cancel\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;POST\u0026quot; } ] } Order is in COMPLETED state so the services does not return the cancel link anymore.\nRequest GET v1/checkout/orders/52181732T9513405D HTTP/1.1 Host: api.foo.com Content-Type: application/json Authorization: Bearer oauth2_token Response HTTP/1.1 200 OK Content-Type: application/json { \u0026quot;payment_details\u0026quot;:{ ... }, \u0026quot;status\u0026quot;:\u0026quot;COMPLETED\u0026quot;, \u0026quot;links\u0026quot;:[ { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;https://api.foo.com/v1/checkout/orders/19S86694A9334040A\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot; } ] } Note: The service MAY decide to support cancellation of orders (for orders with COMPLETED status) in some countries in future but that does not require the client to change anything in its code. All that a client knows or has coded when it first integrated with the service is the request body that is required to cancel an order.\nWhen an operation is carried out asynchronously, it is important to provide relevant links to client so that the client can find out more details about the operation such as finding out status or perform get, update and delete operations. Please refer to Asynchronous Operations to find how the HATEOAS links could be used in response of an asynchronous operation.\nSome services always return very large response because of the nature of the domain they address. APIs of such services are sometimes referred as Composite APIs (they accumulate data from various sources or an aggregate of more than one services). For such APIs, sending the entire response drastically impacts performance of the API consumer, API server and the underlying network. In such cases, the client can ask the service to return partial representation using Prefer: return=minimal HTTP header. A service could send response with relevant HATEOAS links with minimal data to improve the performance.\nThis section describes guidelines for handling bulk calls in APIs. There are two different methods that you could use for bulk processing.\n  Homogeneous: operation involves request and response payload representing collection of resources of the same type. Same operation is applied on all items in the collection.\n  Heterogeneous: operation involves a request and response payloads that contain one or more requests and reponse payloads respectively. Each nested request and response represents an operation on a specific type of resource. However, the container request and response have one or more operations operating on one or more types of resources. It is recommended to use a public domain standard such as [OData Batch Specification] 1 in such cases.\n  This section only addresses bulk processing of payloads using the homogenous method.\nEach bulk request is a single HTTP request to one target API endpoint. This example illustrates a bulk add operation.\nExample Request:\nPOST /v1/devices/cards HTTP/1.1 Host: api.foo.com Content-Length: total_content_length { ... \u0026quot;items\u0026quot;: [ { \u0026quot;account_number\u0026quot;: \u0026quot;2097094104180012037\u0026quot;, \u0026quot;address_id\u0026quot;: \u0026quot;466354\u0026quot;, \u0026quot;phone_id\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;M\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Shriver\u0026quot;, \u0026quot;primary_card_holder\u0026quot;: false }, { \u0026quot;account_number\u0026quot;: \u0026quot;2097094104180012047\u0026quot;, \u0026quot;address_id\u0026quot;: \u0026quot;466354\u0026quot;, \u0026quot;phone_id\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;M\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Shriver\u0026quot;, \u0026quot;primary_card_holder\u0026quot;: false }, { \u0026quot;account_number\u0026quot;: \u0026quot;2097094104180012023\u0026quot;, \u0026quot;address_id\u0026quot;: \u0026quot;466354\u0026quot;, \u0026quot;phone_id\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;M\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Shriver\u0026quot;, \u0026quot;primary_card_holder\u0026quot;: false } ] } The response usually contains the status of each item. Failure of an individual item is described using Error Handling Guidelines for an individual item. Given below is such an example.\nExample Response:\nHTTP/1.1 200 OK { ... \u0026quot;batch_result\u0026quot;:[ { … \u0026lt;Success_body\u0026gt; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;#/credit_card/expire_month\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Required field is missing\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;:\u0026quot;#/credit_card/currency\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;XYZ\u0026quot;, \u0026quot;issue\u0026quot;:\u0026quot;Currency code is invalid\u0026quot;, \u0026quot;location\u0026quot;:\u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } ] } If the API supports atomic semantics to processing requests, there would be a single response code for the entire request with one or more errors as applicable.\nExample Response:\nNote:\nHTTP/1.1 400 Bad Request { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;#/credit_card/currency\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;XYZ\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Currency code is invalid\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } ] Similar to bulk add, a service can support bulk update operation (replace using HTTP PUT or partial update using PATCH). This is possible provided the bulk add request also creates a first-class resource (e.g. a batch resource) that is uniquely identifiable using an id and returned to the client. The subsequent update operations could then use this id and perform updates on constituent elements of the batch as if an update is performed on a single resource.\nFor bulk replace and update operations, every effort should be made to make the execution atomic (all or nothing semantics). When it is not possible to make it so, the response should be similar to the partial response of bulk add operation described in the previous section.\nTne following guidelines describe HTTP status code and error handling for bulk operations.\n If atomicity is supported (all or nothing), use the regular REST API standards for error handling as there would be only one response code. To support partial failures, you MUST return 200 OK as the overall bulk processing status with individual status of each bulk item. In case of an error while processing a bulk item, the error description MUST follow the Error Handling Guidelines. If asynchronous processing is supported, the API MUST return 202 Accepted with a status URI for the client to monitor the request. The client may choose to ignore the status URI if it has registered itself with the API server for notification via webhooks.  For a failed item, you MAY use the JSON Pointer Expressions in the error response for that item using the field attribute of error.json. The caller can then map a response item\u0026rsquo;s processing state to the exact request item in the original bulk request. Given below is an error response sample using the JSON Pointer Expressions.\nError Response Sample:\n HTTP/1.1 200 OK [ { … \u0026lt;Success_body\u0026gt; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/items/@account_number=='2097094104180012047'/address_id\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Invalid Address Id for the account\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/items/@account_number=='2097094104180012023'/phone_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;XYZ\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Phone Id is invalid\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } ] The alternative is to create a response that contains the processing status of each item in the same order as it was received in the original request. The failed item would be represented using error.json with appropriate value in the field attribute.\nError Response Sample:\n HTTP/1.1 200 OK [ { … \u0026lt;Success_body\u0026gt; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/items/0/address_id\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Invalid Address Id for the account\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;VALIDATION_ERROR\u0026quot;, \u0026quot;details\u0026quot;: [ { \u0026quot;field\u0026quot;: \u0026quot;/items/2/phone_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;XYZ\u0026quot;, \u0026quot;issue\u0026quot;: \u0026quot;Phone Id is invalid\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;body\u0026quot; } ], \u0026quot;debug_id\u0026quot;: \u0026quot;123456789\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Invalid data provided\u0026quot;, \u0026quot;information_link\u0026quot;: \u0026quot;http://developer.foo.com/apidoc/blah#VALIDATION_ERROR\u0026quot; } ] Designers of new services SHOULD refer to the RESTful Web Services Cookbook at Safari Books Online for other useful patterns.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/",
	"title": "API First",
	"tags": [],
	"description": "",
	"content": "Chapter 1 1. API First Concepts APIs are the glue of the digital world. They are embeddable components like legos, in which the edges are connectable via HTTP Protocol.\nAPI First ideates about to draft the ideas starting by the APIs, in common sense, it means that if you have good APIs, you will have great applications.\nEverything starts at the level of the contract, which is the definition of the API\u0026rsquo;s capabilities, in other words: What the API does and how.\nThese definitions are defined under industry standards, which are Open API Specifications (OAS). The definition/contract represented through a JSON or YAML file, and it is commonly called the \u0026ldquo;Swagger file\u0026rdquo;.\nDesigning the API Contracts To create great APIs, always starts on to clear and concise contracts (OAS/Swagger), although, to create those contracts is not an easy task, many misconceptions and learning curve can damage your API contract.\nUse the arrows to navigate to the next content\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/cont/pages/",
	"title": "Pages organization",
	"tags": [],
	"description": "",
	"content": "In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md \u0026lt;-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md \u0026lt;-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md \u0026lt;-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md \u0026lt;-- /level-one/level-two │ │ ├── page-2-a.md \u0026lt;-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md \u0026lt;-- /level-one/level-two/page-2-b │ │ └── page-2-c.md \u0026lt;-- /level-one/level-two/page-2-c │ ├── _index.md \u0026lt;-- /level-one │ ├── page-1-a.md \u0026lt;-- /level-one/page-1-a │ ├── page-1-b.md \u0026lt;-- /level-one/page-1-b │ └── page-1-c.md \u0026lt;-- /level-one/page-1-c ├── _index.md \u0026lt;-- / └── page-top.md \u0026lt;-- /page-top  _index.md is required in each folder, it’s your “folder home page”\n Types Hugo-theme-learn defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it\u0026rsquo;s just a number but that could be an icon.\n+++ title = \u0026#34;Basics\u0026#34; chapter = true weight = 5 pre = \u0026#34;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026#34; +++ ### Chapter 1  # Basics Discover what this Hugo theme is all about and the core-concepts behind it. To tell Hugo-theme-learn to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++ title = \u0026#34;Installation\u0026#34; weight = 15 +++ The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt; Hugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of Hugo ones :\n+++ # Table of content (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = \u0026#34;false\u0026#34; # If set, this will be used for the page\u0026#39;s menu entry (instead of the `title` attribute) menuTitle = \u0026#34;\u0026#34; # The title of the page in menu will be prefixed by this HTML content pre = \u0026#34;\u0026#34; # The title of the page in menu will be postfixed by this HTML content post = \u0026#34;\u0026#34; # Set the page as a chapter, changing the way it\u0026#39;s displayed chapter = false # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = \u0026#34;\u0026#34; # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = \u0026#34;\u0026#34; +++ Add icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the Github icon.\n+++ title = \u0026#34;Github repo\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fab fa-github\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; \u0026#34; +++ Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++ title = \u0026#34;My page\u0026#34; weight = 5 +++ Using a custom title for menu entries By default, Hugo-theme-learn will use a page\u0026rsquo;s title attribute for the menu item (or linkTitle if defined).\nBut a page\u0026rsquo;s title has to be descriptive on its own while the menu is a hierarchy. We\u0026rsquo;ve added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++ title = \u0026#34;Install on Linux\u0026#34; menuTitle = \u0026#34;Linux\u0026#34; +++ Homepage To configure your home page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "",
	"content": "Tooling One of the most known tool for creating API contracts is no doubt: Swagger Editor by SmartBear, in fact if you go to https://swagger.io you will discover very interesting solutions. They also have solutions to render your API Contract, and also a very interesting way to use Code Generators, either for your API server side and also client side.\nSkalena Tooling for API Contract After several projects and consulting engagements, we decided to use a free solution called Stop Light:\nWe decided to use this tool, simply because we can promote very collaborative sessions with our customers and then define together how we will define the API, exactly which kind of data it will expose, as well as which methods, parameters and in the end, we can check the generated Swagger/OAS file in a very two-way effective manner.\nHere you can get more information as well as to download that tool for your specific OS.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/cont/",
	"title": "Technical Samples",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Tecnhnical Samples In this chapter, we will cover a few examples and best practices, based on technologies that we have been working.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/requirements/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "API Projects Category There are some APIs projects archetypes that we have been noticing:\n The customer has Zero APIs, The customer has some APIs that you have just to do some proxy The customer has a bunch of APIs and you have to do compositions or orchestrations with them Customers asking about: What about this new GraphQL momentum  Customer has Zero APIs That is the scenario where you will have to do important architectural decisions, from adopting a programming language, a platform, a framework, or all together. To understand the existing technology that exists in the customer is crucial do define how you will build your Endpoints.\nIf you had decided to adopt a Microservice Architecture style, keep in mind that you will face not only programming and new paradigms, but also infrastructure challenges, as your customer will at a certain level to embrace numerous new concepts such as CI/CD pipelines, containers, Kubernetes so for so forth.\nAt Skalena we always decided to start with Quick wins, it means, not start with dramatic changes and to do the things in a very controlled pace. Therefore, if you have a savvy customer ahead, great to move the things in a fast way, but we do believe to do the things in according to Agile principles is safer.\nCustomer has some APIs that you have just to Proxy That is a common scenario when companies are moving towards digital, they get first an API Gateway Pattern to act as a central proxy, where you can use it as a unique point for Authentication controlling, as well as some analytics, tracing and monitoring. That is a moment, where just an API Gateway shall be enough for you.\nWhat is important in that point is to understand how you will interact with your client requests, which HTTP headers you should care about, does your payload response must be enriched, changed etc. In that scenario, we extremelly recommend you establish a very simple sequence diagram in order to communicate with your customers, things like the following ones:\nsequenceDiagram Client -\u0026gt;\u0026gt; API Gateway: Send the request with Bearer Auth API Gateway--\u0026gt;\u0026gt;Partner Endpoint: Header + Basic Auth Partner Endpoint--x Backend: IP Whitelist via Firewall Note right of Backend: Not exposed to \u0026lt;br\u0026gt;Internet. Simple diagrams like that, can save your time and the communication will be opener\nCustomer with APIs: Compositions or orchestrations It is something very common that you might have ready services/backends, but you must have to do that we call: composite APIs, which means through a unique call to invoke several endpoints right a once.\nIn those scenarios, we have a few options:\n Build a composite Microservice/Service To Use Integration platforms/frameworks, such as WSO2, Apache Camel, Kafka Connectors, or proprietary solutions.  Either scenario would have its drawbacks and advantages, although in our methodology we actually have a preference for the Integrations frameworks/platforms due to productivity and some code generating techniques that we have in place.\nImagine the following scenario:\nsequenceDiagram Client -\u0026gt;\u0026gt; API Gateway: Send the request /order-items API Gateway--\u0026gt;\u0026gt;Composite: One request Composite --\u0026gt;\u0026gt;Composite : Aggregating response Composite -\u0026gt;\u0026gt; API Gateway : Aggregating response Composite --\u0026gt;Backend A: requesting 1st Service Backend A --\u0026gt;\u0026gt;Composite:response Composite --\u0026gt;\u0026gt;Backend B:requesting 2nd Service Backend B --\u0026gt;\u0026gt;Composite:response Furthermore, to simply compose services based on existing backends, many other aspects might be intrinsically involved, for instance:\na) Backends developed by different companies or partners might treat authentication and authorization differently.\nb) If you have a set of services, and you have to invoke them all, what happened if some of those fails? In that regard, your new composite service must treat that anyhow. We can use techniques related to circuit-breakers, or simply to define timeouts, according to the use cases, sometimes you can have partial responses (the data coming from responsive backends) and ignore the one that has failed, or there are cases, where it is \u0026ldquo;all or nothing\u0026rdquo; if any of the services does not respond, you can send an HTTP error code with a fault, and making sure that you point which were the service that did not respond properly.\nCustomers asking about: What about this new GraphQL momentum GraphQL is a technogology that is gaing more and more relevance in many organizations around the world.\nSource: https://graphql.org/ GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\nGraphQL queries access not just the properties of one resource but also smoothly follow references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request. Apps using GraphQL can be quick even on slow mobile network connections.\nConsiderations It is a matter of fact that REST model comes with several drawbacks, such as the points mentioned above, however it has come considerable interesting points according to your API Strategy, going straigth to the point: REST APIs are easier to understand which are the avaialable capabilites due to the Swagger/OAS documentations. We have been some companies exposing their services through GraphQL, however we still don\u0026rsquo;t have consierable data about how the developers are engaging with this kind of Developer Portals.\nThat is all about your strategy, some developers(users) might be more proficient, but others rather prefers to get something clear, let\u0026rsquo;s figure out based on a real example about GraphQL:\n... mutation { addAgreementToUser(input: { clientMutationId: \u0026quot;012\u0026quot;, userId: \u0026quot;b1ca0944-7822-3538-920d-58b233154608\u0026quot;, agreementTermId: \u0026quot;e32a7918-eef5-41af-909b-f4c93cee2e22\u0026quot; }) { clientMutationId user { id username firstName lastName displayName agreement { agreementTerm { id title description url } } } } ...  If we compare the above GraphQL instruction with something like:\nHTTP POST http://server/api/v2/agreement body: some JSON  There is a considerable difference.\nRecommendations According to the customer industry, we are recommending our customers to user GraphQL as a tier where we can compose services and expose them via our mediation layer (Microservice) to a REST API:\nsequenceDiagram Client -\u0026gt;\u0026gt; API Gateway: Send the request /order-items API Gateway--\u0026gt;\u0026gt;Composition: One request Composition --\u0026gt;\u0026gt;Composition : Aggregating response Composition -\u0026gt;\u0026gt; API Gateway : Aggregating response Composition --\u0026gt;GraphQL: invoking GraphQL instructions GraphQL --\u0026gt;\u0026gt;Composition :response "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/cont/wso2/",
	"title": "WSO2",
	"tags": [],
	"description": "",
	"content": "Introduction WSO2 is an opensource vendor that delivers a platform which counts with a component for integration (Enterprise Integrator), API Manager and Identity Server for IAM - Identity and Access Manager.\nSkalena counts with the WSO2 pioneers in Latin America, responsible for more than 30 sucessful deployments in Mexico, Argentina, Colombia, Ecuador and Brazil.\nIn This page, you will be able to find informations specialy related to Integration and API Best practices.\nPre-requirements Please, make sure you have the following components installed into your computer:\n Visual Studio Code Docker JDK 1.8 or 11 Maven  If you are using Windows, and the version does not supports docker, we recommend you to use Vagrant to setup/run a VM Box into your machine, or to run a linux CentOs or Ubuntu into a VM in VirtualBox or VMWare.\n 1. Configuring Visual Studio Code Please, make sure that your Visual Studio is properly configured to use Java, Maven and please, install the WSO2 Extension for Integration.\nHere are the information about Visual Studio Code: https://marketplace.visualstudio.com/items?itemName=WSO2.wso2ei.\nRequirements:  Java JDK 8 at least The JAVA_HOME environment variable must be set Note: The path should end at the parent folder that contains the binfolder.  Example Path: /usr/lib/jvm/java-1.8.0 if bin exists at /usr/lib/jvm/java-1.8.0/bin   Maven 3.5.0 or later  Quick Start:  Step 1. Install the Synapse extension for Visual Studio Code. Step 2. Open or create a Synapse Project and start integration!  Extension is activated when you first access an xml file or via the command WSO2EI: Activate WSO2 EI Tooling through command palette    Useful Commands: Open the Command Palette ( [Command] + [Shift] + [P] on macOS and [Ctrl] + [Shift] + [P] on Windows/Linux) and type in one of the following commands:\nChapter To create a Chapter page, run the following commands\nhugo new --kind chapter \u0026lt;name\u0026gt;/_index.md It will create a page with predefined Front-Matter:\n+++ title = \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date = {{ .Date }} weight = 5 chapter = true pre = \u0026#34;\u0026lt;b\u0026gt;X. \u0026lt;/b\u0026gt;\u0026#34; +++ ### Chapter X  # Some Chapter title Lorem Ipsum. Default To create a default page, run either one of the following commands\n# Either hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;/_index.md # Or hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;.md It will create a page with predefined Front-Matter:\n+++ title = \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date = {{ .Date }} weight = 5 +++ Lorem Ipsum. "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/cont/markdown/",
	"title": "Markdown syntax",
	"tags": [],
	"description": "",
	"content": " This page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes\u0026hellip;)\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. \u0026ndash; John Gruber Grav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\nBookmark this page for easy future reference!\n Headings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading Renders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u0026lt;h1\u0026gt;h1 Heading\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt; Comments Comments should be HTML compatible\n\u0026lt;!-- This is a comment --\u0026gt; Comment below should NOT be seen:\nHorizontal Rules The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  renders to:\n   Body Copy Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. renders to this HTML:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt; Emphasis Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text** renders to:\nrendered as bold text\nand this HTML\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt; Italics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_ renders to:\nrendered as italicized text\nand this HTML:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt; strikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~ Which renders to:\nStrike through this text.\nHTML:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt; Blockquotes For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote.\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. Renders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; Blockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt; \u0026gt; \u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. \u0026gt; \u0026gt; Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus. Renders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\n Notices The old mechanism for notices overriding the block quote syntax (\u0026gt;\u0026gt;\u0026gt;) has been deprecated. Notices are now handled via a dedicated plugin called Markdown Notices\n Lists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet For example\n+ Lorem ipsum dolor sit amet + Consectetur adipiscing elit + Integer molestie lorem at massa + Facilisis in pretium nisl aliquet + Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at + Faucibus porta lacus fringilla vel + Aenean sit amet erat nunc + Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at   Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Ordered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; TIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**. Renders to:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped as code.\nHTML:\n\u0026lt;p\u0026gt;In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped as \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt; Indented code Or indent several lines of code by at least four spaces, as in:\nRenders to:\n// Some comments line 1 of code line 2 of code line 3 of code  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; // Some comments line 1 of code line 2 of code line 3 of code \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; Block code \u0026ldquo;fences\u0026rdquo; Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code.\nSample text here... HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; Syntax highlighting GFM, or \u0026ldquo;GitHub Flavored Markdown\u0026rdquo; also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\nRenders to:\ngrunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } }; Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | Renders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Right aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description | | ------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |    Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io) Renders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u0026lt;a href=\u0026#34;http://assemble.io\u0026#34;\u0026gt;Assemble\u0026lt;/a\u0026gt; Add a title [Upstage](https://github.com/upstage/ \u0026#34;Visit Upstage!\u0026#34;) Renders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u0026lt;a href=\u0026#34;https://github.com/upstage/\u0026#34; title=\u0026#34;Visit Upstage!\u0026#34;\u0026gt;Upstage\u0026lt;/a\u0026gt; Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026#34;chapter-1\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 2 \u0026lt;a id=\u0026#34;chapter-2\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 3 \u0026lt;a id=\u0026#34;chapter-3\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. NOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png) or\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \u0026#34;The Stormtroopocat\u0026#34;) Like links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id] With a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg \u0026quot;The Dojocat\u0026quot;  Resizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20pc) ![Minion](https://octodex.github.com/images/minion.png?height=50px) ![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026amp;width=300px) Add CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=shadow) ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border) ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow) Lightbox Add a HTTP featherlight parameter to the link image to disable lightbox. By default lightbox is enabled using the featherlight.js plugin. You can disable this by defining featherlight to false.\n![Minion](https://octodex.github.com/images/minion.png?featherlight=false) "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/",
	"title": "Working in Progress 2",
	"tags": [],
	"description": "",
	"content": "Working in Progress\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/api-vendors/",
	"title": "API Vendors",
	"tags": [],
	"description": "",
	"content": "This section will cover some interesting API\u0026rsquo;s solutions vendors and some summary about them. In addition, we will classify the kind/stereotype of available solutions.\nDefinitions Here are definitions of terms that will be referred to repeatedly during this article for your reference.\n Proxy – A server that acts as an intermediary for requests from clients seeking resources from servers that provide those resources. Reverse Proxy – Type of proxy that retrieves resources on behalf of a client from one or more servers and then returns these resources to the client, appearing as from the proxy. API Gateway – A system to that receives API requests, performs traffic routing and management to the backend services and returns a response to the client / end user requester. Ingress – Incoming traffic (north/south) to a cluster running your application services. When referred to in Kubernetes environments, an Ingress Controller object exists to specifically fulfill this function. North/South – This direction of traffic is defined as the client to server traffic, between the clients or end users outside of the datacenter to the network inside the datacenter. East/West – The service to service communication that occurs within the cluster and does not leave your network. Service Mesh – An example of east/west traffic using an architecture where a proxy sidecar is deployed alongside each service to manage the traffic. Source: https://solo.io  Commercial Vendors There are several solutions very interesting in the market, we will mention the following ones:\n Sensedia - A Brazilian company that counts with very strong consulting services and a very complete solution. They have so many interesting customers in financial industry, as well very emblematic success cases. Actually they are expanding to other territories, such as Europe and some countries in Latin America. Both Forrester and Gartner shares very good comments and analyisis about them. Apigee - One of the pioneers in API Market, they were acquired by Google and have been dominant in many Gartner and Forrester reports. IBM API Connect - Original StrongLoop, acquired by IBM. Interesting solution provided by IBM. Axway - Together with Apigee they are one of the pioneers in the market. CA API Gateway - Originally Layer7 API Gateway, acquired by CA and later one acquired by Broadcom. OpenLegacy - A very interesting solution, with so many accelerators, code generators and enablers for API inititives. AWS API Gateway - Proprietary API Gateway running only in AWS Environment and very dependent from AWS Ecosystem. MuleSoft - Proprietary API solution acquired by Salesforce.  Enterprise OpenSource The following solutions are Opensource with Enterprise Subscriptions (SLA and Support). The solutions listed bellow have what they call \u0026ldquo;Community versions\u0026rdquo;, as well as \u0026ldquo;Enterprise Versions\u0026rdquo; with exclusive features.\n Kong - They are by far one of the most known API Gateways in the market. Kong runs on top of NGINX, and it uses Lua(a programming language created in Rio de Janeiro in Brazil), to extend and create its plugins. Kong can be classified as an API Proxy. Actually KongHQ, the company behind Kong Community is actually delivering very interesting components, such as Kubernetes Ingress Controller and other very interesting components. Tyk - A very performatic API Gateway, API Proxy, API Analytics and Developer Portal solution, which according to our evaluation is a great solution for customers looking for a Cloud based solution. According to their Github sources, they are using GoLang to build their solutions. WSO2 - One of the most complete plataforms in API Management industry. They have several components out-of-the-box, such as a Key Manager for generating and validating tokens, as well powerful real-time analytics engine. Skalena - We are working in to have our own API Gateway, this is a working in progress, that we would be announcing soon.  Did not found your preferred Solution here? Please, if you would like to see or improve the references about the products here, please, reach us at api-methodology (a) skalena.com.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/infra/",
	"title": "Infrastrucutre",
	"tags": [],
	"description": "",
	"content": "Virtual Machines There are still several organizations relying on VMs in order to leverage and optimize their infrastructure. We do believe that some traditional markets will still be using this technology for years ahead. However there are a lot of technologies that can help you manage an environemnt like that:\n Vagrant: It provides the same, easy workflow regardless of your role as a developer, operator, or designer. It leverages a declarative configuration file which describes all your software requirements, packages, operating system configuration, users, and more.  Containers (Docker) Containers is not a new technology, we saw it first initially in mid of 2000\u0026rsquo;s in Solaris, however Docker came to be established as a standard in the market. If you would like to see a Docker alternative, we do recommend you take a look at: https://linuxcontainers.org/. Move towards containers as a factible strategy is a great step for a company that is modernizing their infrastructure. We have been using Docker as an intermediate point between VMs and Kubernetes, and in order to have a fully orquestrated environment even in Docker, we have been using Docker Swarm, and its way to organize a set/group of machines (containers) that can be scalable according to the business\u0026rsquo;s needs.\nKubernetes Kubernetes is a container orchestrator solution, which aims to solve the managing, life-cycle, networking and other componentes when you have to run several containers at the same time. It was created and opensourced by Google. The organizations can install and run Kubernetes AKA \u0026ldquo;k8s\u0026rdquo;, on-premises, or to use one of the distributions from major public cloud providers, such as Google, Azure and AWS. To execute the whole microservices architecture using K8S requires to shift some paradigms and way to look the old-fashion or traditional infraestrucutre.\nAPI Firewall In front of API Gateways we can find out a new layer in market: API Firewalls. The actual markets considers that a regular WAF (Web Application Firewall), can be enough to protect their APIs, that is not so true.\nOWASP API - Security Top 10 As a result of the growing threat landscape and increasing usage of APIs, the OWASP API Security Top 10 Project was launched to help companies address security vulnerabilities specific to APIs:\n API1 : Broken Object Level Access Control API2 : Broken Authentication API3 : Excessive Data Exposure API4 : Lack of Resources \u0026amp; Rate Limiting API5 : Missing Function Level Access Control API6 : Mass Assignment API7 : Security Misconfiguration API8 : Injection API9 : Improper Assets Management API10 : Insufficient Logging \u0026amp; Monitoring  We would like to present the 42Crunch solution, that aims to work as a dedicated solution just as an API Firewall. With 42Crunch, security can be easily defined in OpenAPI contracts, tested for bad behavior, and protected by a micro API firewall with the click of a button – ensuring continuous, unparalleled protection across the entire API lifecycle.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/api-best-practices/",
	"title": "APIs Design Best Practices",
	"tags": [],
	"description": "",
	"content": "1) Terminologies The following are the most important terms related to REST APIs\n Resource is an object or representation of something, which has some associated data with it and there can be set of methods to operate on it. E.g. Animals, schools and employees are resources and delete, add, update are the operations to be performed on these resources. Collections are set of resources, e.g Companies is the collection of Company resource. URL (Uniform Resource Locator) is a path through which a resource can be located and some actions can be performed on it.  2) API endpoint Let’s write few APIs for Companies which has some Employees, to understand more.\n/getAllEmployees is an API which will respond with the list of employees. Few more APIs around a Company will look like as follows:\n _/addNewEmployee_ _/updateEmployee_ _/deleteEmployee_ _/deleteAllEmployees_ _/promoteEmployee_ _/promoteAllEmployees_  And there will be tons of other API endpoints like these for different operations. All of those will contain many redundant actions. Hence, all these API endpoints would be burdensome to maintain, when API count increases.\nWhat is wrong?  The URL should only contain resources(nouns) not actions or verbs. The API path/addNewEmployee contains the action addNew along with the resource name Employee.  Then what is the correct way?  /companies endpoint is a good example, which contains no action. But the question is how do we tell the server about the actions to be performed on companies resource viz. whether to add, delete or update?  This is where the HTTP methods (GET, POST, DELETE, PUT), also called as verbs, play the role.\nThe resource should always be plural in the API endpoint and if we want to access one instance of the resource, we can always pass the id in the URL.\n method GET path /companies should get the list of all companies method GET path /companies/34 should get the detail of company 34 method DELETE path /companies/34 should delete company 34  In few other use cases, if we have resources under a resource, e.g Employees of a Company, then few of the sample API endpoints would be:\n GET /companies/3/employees should get the list of all employees from company 3 GET /companies/3/employees/45 should get the details of employee 45, which belongs to company 3 DELETE /companies/3/employees/45 should delete employee 45, which belongs to company 3 POST /companies should create a new company and return the details of the new company created  Isn’t the APIs are now more precise and consistent? 😎\nConclusion: The paths should contain the plural form of resources and the HTTP method should define the kind of action to be performed on the resource.\n3) HTTP methods (verbs) HTTP has defined few sets of methods which indicates the type of action to be performed on the resources.\n The URL is a sentence, where resources are nouns and HTTP methods are verbs.\n The important HTTP methods are as follows:\n GET method requests data from the resource and should not produce any side effect.\nE.g /companies/3/employees returns list of all employees from company 3. POST method requests the server to create a resource in the database, mostly when a web form is submitted.\nE.g /companies/3/employees creates a new Employee of company 3.\nPOST is non-idempotent which means multiple requests will have different effects. PUT method requests the server to update resource or create the resource, if it doesn’t exist.\nE.g. /companies/3/employees/john will request the server to update, or create if doesn’t exist, the john resource in employees collection under company 3.\nPUT is idempotent which means multiple requests will have the same effects. DELETE method requests that the resources, or its instance, should be removed from the database.\nE.g /companies/3/employees/john/ will request the server to delete john resource from the employees collection under the company 3.  There are few other methods which we will discuss in another post.\n4) HTTP response status codes When the client raises a request to the server through an API, the client should know the feedback, whether it failed, passed or the request was wrong. HTTP status codes are bunch of standardized codes which has various explanations in various scenarios. The server should always return the right status code.\nThe following are the important categorization of HTTP codes:\n2xx (Success category) These status codes represent that the requested action was received and successfully processed by the server.\n 200 Ok The standard HTTP response representing success for GET, PUT or POST. 201 Created This status code should be returned whenever the new instance is created. E.g on creating a new instance, using POST method, should always return 201 status code. 204 No Content represents the request is successfully processed, but has not returned any content.\nDELETE can be a good example of this.\nThe API DELETE /companies/43/employees/2 will delete the employee 2 and in return we do not need any data in the response body of the API, as we explicitly asked the system to delete. If there is any error, like if employee 2 does not exist in the database, then the response code would be not be of 2xx Success Category but around 4xx Client Error category.  3xx (Redirection Category)  304 Not Modified indicates that the client has the response already in its cache. And hence there is no need to transfer the same data again.  4xx (Client Error Category) These status codes represent that the client has raised a faulty request.\n 400 Bad Request indicates that the request by the client was not processed, as the server could not understand what the client is asking for. 401 Unauthorized indicates that the client is not allowed to access resources, and should re-request with the required credentials. 403 Forbidden indicates that the request is valid and the client is authenticated, but the client is not allowed access the page or resource for any reason. E.g sometimes the authorized client is not allowed to access the directory on the server. 404 Not Found indicates that the requested resource is not available now. 410 Gone indicates that the requested resource is no longer available which has been intentionally moved.  5xx (Server Error Category)  500 Internal Server Error indicates that the request is valid, but the server is totally confused and the server is asked to serve some unexpected condition. 503 Service Unavailable indicates that the server is down or unavailable to receive and process the request. Mostly if the server is undergoing maintenance.  5) Field name casing convention You can follow any casing convention, but make sure it is consistent across the application. If the request body or response type is JSON then please follow camelCase to maintain the consistency.\n6) Searching, sorting, filtering and pagination All of these actions are simply the query on one dataset. There will be no new set of APIs to handle these actions. We need to append the query params with the GET method API.\nLet’s understand with few examples how to implement these actions.\n Sorting In case, the client wants to get the sorted list of companies, the GET /companies endpoint should accept multiple sort params in the query.\nE.g GET /companies?sort=rank_asc would sort the companies by its rank in ascending order. Filtering For filtering the dataset, we can pass various options through query params.\nE.g GET /companies?category=banking\u0026amp;location=india would filter the companies list data with the company category of Banking and where the location is India. Searching When searching the company name in companies list the API endpoint should be GET /companies?search=Digital Mckinsey Pagination When the dataset is too large, we divide the data set into smaller chunks, which helps in improving the performance and is easier to handle the response. Eg. GET /companies?page=23 means get the list of companies on 23rd page.  If adding many query params in GET methods makes the URI too long, the server may respond with 414 URI Too long HTTP status, in those cases params can also be passed in the request body of the POST method.\n7) Versioning When your APIs are being consumed by the world, upgrading the APIs with some breaking change would also lead to breaking the existing products or services using your APIs.\nhttp://api.yourservice.com/v1/companies/34/employees is a good example, which has the version number of the API in the path. If there is any major breaking update, we can name the new set of APIs as v2 or v1.x.x\nThese guidelines are compiled on my experience of development. I would love to know your views on the pointers mentioned above. Please leave a comment, and let me know!\nOriginal Post by Mahesh Haldar @haldar.mahesh: https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_details_all%3Bodbdl3ujQ7CFgA21%2FhKW2A%3D%3D\n10 API Best Practices (Design) Original Post: https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291\nWeb APIs has become an very important topic in the last year. We at M-Way Solutions are working every day with different backend systems and therefore we know about the importance of a clean API design.\nTypically we use a RESTful design for our web APIs. The concept of REST is to separate the API structure into logical resources. There are used the HTTP methods GET, DELETE, POST and PUT to operate with the resources.\nThese are 10 best practices to design a clean RESTful API:\n1. Use nouns but no verbs For an easy understanding use this structure for every resource:\nResource GET read - /cars POST create - /cars PUT update - /cars DELETE remove/blocks- /cars\nDo not use verbs:\n/getAllCars /createNewCar /deleteAllRedCars  2. GET method and query parameters should not alter the state Use PUT, POST and DELETE methods instead of the GET method to alter the state.\nDo not use GET for state changes:\nGET /users/711?activate or GET /users/711/activate  3. Use plural nouns Do not mix up singular and plural nouns. Keep it simple and use only plural nouns for all resources.\n/cars instead of /car /users instead of /user /products instead of /product /settings instead of /setting  4. Use sub-resources for relations If a resource is related to another resource use subresources.\nGET /cars/711/drivers/ Returns a list of drivers for car 711 GET /cars/711/drivers/4 Returns driver #4 for car 711  5. Use HTTP headers for serialization formats Both, client and server, need to know which format is used for the communication. The format has to be specified in the HTTP-Header.\nContent-Type defines the request format.\nAccept defines a list of acceptable response formats.\n6. Use HATEOAS Hypermedia as the Engine of Application State is a principle that hypertext links should be used to create a better navigation through the API.\n{ \u0026quot;id\u0026quot;: 711, \u0026quot;manufacturer\u0026quot;: \u0026quot;bmw\u0026quot;, \u0026quot;model\u0026quot;: \u0026quot;X5\u0026quot;, \u0026quot;seats\u0026quot;: 5, \u0026quot;drivers\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;23\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Stefan Jauker\u0026quot;, \u0026quot;links\u0026quot;: [ { \u0026quot;rel\u0026quot;: \u0026quot;self\u0026quot;, \u0026quot;href\u0026quot;: \u0026quot;/api/v1/drivers/23\u0026quot; } ] } ] }  7. Provide filtering, sorting, field selection and paging for collections Filtering:\nUse a unique query parameter for all fields or a query language for filtering.\nGET /cars?color=red Returns a list of red cars GET /cars?seats\u0026lt;=2 Returns a list of cars with a maximum of 2 seats  Sorting:\nAllow ascending and descending sorting over multiple fields.\nGET /cars?sort=-manufactorer,+model  This returns a list of cars sorted by descending manufacturers and ascending models.\nField selection\nMobile clients display just a few attributes in a list. They don’t need all attributes of a resource. Give the API consumer the ability to choose returned fields. This will also reduce the network traffic and speed up the usage of the API.\nGET /cars?fields=manufacturer,model,id,color  Paging\nUse limit and offset. It is flexible for the user and common in leading databases. The default should be limit=20 and offset=0\nGET /cars?offset=10\u0026amp;limit=5  To send the total entries back to the user use the custom HTTP header: X-Total-Count.\nLinks to the next or previous page should be provided in the HTTP header link as well. It is important to follow this link header values instead of constructing your own URLs.\nLink: https://blog.mwaysolutions.com/sample/api/v1/cars?offset=15\u0026amp;limit=5; rel=\u0026quot;next\u0026rdquo;,\nhttps://blog.mwaysolutions.com/sample/api/v1/cars?offset=50\u0026amp;limit=3; rel=\u0026quot;last\u0026rdquo;,\nhttps://blog.mwaysolutions.com/sample/api/v1/cars?offset=0\u0026amp;limit=5; rel=\u0026quot;first\u0026rdquo;,\nhttps://blog.mwaysolutions.com/sample/api/v1/cars?offset=5\u0026amp;limit=5; rel=\u0026quot;prev\u0026rdquo;,\n8. Version your API Make the API Version mandatory and do not release an unversioned API. Use a simple ordinal number and avoid dot notation such as 2.5.\nWe are using the url for the API versioning starting with the letter „v“\n/blog/api/v1  9. Handle Errors with HTTP status codes It is hard to work with an API that ignores error handling. Pure returning of a HTTP 500 with a stacktrace is not very helpful.\nUse HTTP status codes\nThe HTTP standard provides over 70 status codes to describe the return values. We don’t need them all, but there should be used at least a mount of 10.\n200 — OK — Eyerything is working\n201 — OK — New resource has been created\n204 — OK — The resource was successfully deleted\n304 — Not Modified — The client can use cached data\n400 — Bad Request — The request was invalid or cannot be served. The exact error should be explained in the error payload. E.g. „The JSON is not valid“\n401 — Unauthorized — The request requires an user authentication\n403 — Forbidden — The server understood the request, but is refusing it or the access is not allowed.\n404 — Not found — There is no resource behind the URI.\n422 — Unprocessable Entity — Should be used if the server cannot process the enitity, e.g. if an image cannot be formatted or mandatory fields are missing in the payload.\n500 — Internal Server Error — API developers should avoid this error. If an error occurs in the global catch blog, the stracktrace should be logged and not returned as response.\nUse error payloads\nAll exceptions should be mapped in an error payload. Here is an example how a JSON payload should look like.\n{ \u0026quot;errors\u0026quot;: [ { \u0026quot;userMessage\u0026quot;: \u0026quot;Sorry, the requested resource does not exist\u0026quot;, \u0026quot;internalMessage\u0026quot;: \u0026quot;No car found in the database\u0026quot;, \u0026quot;code\u0026quot;: 34, \u0026quot;more info\u0026quot;: \u0026quot;http://dev.mwaysolutions.com/blog/api/v1/errors/12345\u0026quot; } ] }  10. Allow overriding HTTP method Some proxies support only POST and GET methods. To support a RESTful API with these limitations, the API needs a way to override the HTTP method.\nUse the custom HTTP Header X-HTTP-Method-Override to overrider the POST Method.\nOther interesting references https://cloud.google.com/apis/design/\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/basics/api-checklist/",
	"title": "API Check-List and Auditing",
	"tags": [],
	"description": "",
	"content": "API Audit API Audit is a method to ensure APIs are matching the API Design guidelines. It also helps check for usability, security and API management platform compatibility.\ngraph LR; A[Prototype] --|API Auditing| B(Build Just Enough) B -- C{Deliver} C --|Accepted| D[Moving Forward] C --|Not Accepted| E[Review Process]  Details about the Process:  Prototype - Validate the prototype with the API Audit checklist. Please download the document here. Build Just Enough - Validate the API with API Audit. Use all criteria and check the API also live, with automated tests. Check status codes and errors match with designed. Deliver: Validate the API with API Audit. Make sure your status codes match with changes made because of scaling (like async handling, caching etc.)  Main items to be evaluated in according to the document API Management\n API is published via API management API is visible in a Developer portal API can only be accessed via API management gateway Rate limits are enforced when requesting API Specification is maintained automatically when changes are done to API Specification for endpoints is validated on every change against standard specification Specification contains schema for the requests and responses Request and response schema and examples are validated for format and examples pass the schema validation  URIs\n API uses HTTPS (or in special cases other stateless protocol with encryption) The API published under the organization’s official domain Visible domain is shared with other APIs (i.e the domain the API consumers see?) Endpoints are max 2-resources deep (Example /projects/123/tasks/345) Other naming styles in style guide have been applied  API has versioning\n  Versioning strategy is best for the selected API management platform and for the primary API consumers?\n  Major version is in URI (only if API management platform doesn\u0026rsquo;t support versioning based on client subscription)\n  API uses stateless processing (no sessions, OpenID connect tokens are ok)\n  There is no special processing (asynchronous events)\n  HTTP-methods\n GET -requests don\u0026rsquo;t have request bodies POST is used for creating and updating data? POST is used only in standard ways. PUT is used to create or replace entire resource? DELETE is used only to remove a resource?  ** HTTP status codes**\n 404 is used for wrong URL 400 - responses have additional information of the specific error (for example missing required attribute) 401 - response is used when API consumer is using wrong credentials 403 using endpoint which is valid but not accessible by the requesting API consumer or trying to use operation they are not allowed to do 500 - response when there is an internal processing problem\nwhich API consumer can not fix by changing the request 500 - responses have application specific error code but not a\nvery clear plain message about exact error (stack trace or error\ntext) which could expose internal implementation to API\nconsumer GET: 200 OK and items -array as empty array GET: 204 empty response, nothing in the body POST: 200 OK for updates or submits without creating new\nresources 201 - response is combined with the identifier of the created\nresource DELETE: 204 OK when removing resource was successful  Localization\n Date- and time formats in UTC with time zone (ISO standard) Language and country codes used with ISO -standard codes? Other standard codes applied? Geocoordinates in ISO standard if used? Payload localization supported or localized values accessible with\nAPI? Error message localization supported?  Additional security\n  All endpoints are protected by at least a client specific API key\neven if they are publicly available (anti-farming)?\n  OpenID connect and JWT supported (session based\nauthentication)?\n  Protect against CFRS? (allow API management developer portal\nas origin to allow developers to try out the API via the portal user\ninterface)\n  Inputs are validated? true\n  Inputs are validated automatically by the coding framework used? true\n  Outputs are escaped? true\n  Outputs are escaped automatically by the coding framework\nused?\n  Need for encrypting data has been evaluated before\nimplementation? (country-specific privacy and other legal\nrequirements and business confidential requirements)\n  Encryption of data in transit and data in storage has been\nimplemented according to the evaluated need?\n  Need to detect message integrity has been evaluated before\nimplementation (typically using signed and encrypted JWT -\ntokens as authentication and integrity ensured)?\n  Message integrity has been implemented according to the\nevaluated need?\n  UUID used to identify object instead of internal ID? true\n  Secured direct object references i.e. no sensitive information like\nbank account numbers, social security numbers, person names\netc. in URL as resource names or query parameters?\n  Specification contains examples in the standard format of the\nrequests and responses and API documentation is generated\nautomatically based on the specification, schema and examples\nPOST, PUT: 201 Created for creating new resource true\n  400 bad requests from the client, for example a required query\nparameter was missing\n  Whitelisting: POST, PUT and DELETE are only available for\nresources which API consumer can manipulate?\n  GET requests with longest endpoint-hierarchy and multiple query\nparameters with long values don\u0026rsquo;t exceed 2000 of URI length?\n(Some older clients and browsers may have this type of limit,\nalthough it is not official limit and newer clients can handle it well)\n  Reference: https://www.apiopscycles.com/\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/cont/i18n/",
	"title": "Multilingual and i18n",
	"tags": [],
	"description": "",
	"content": "Learn theme is fully compatible with Hugo multilingual mode.\nIt provides:\n Translation strings for default values (English and French). Feel free to contribute ! Automatic menu generation from multilingual content In-browser language switching  Basic configuration After learning how Hugo handle multilingual websites, define your languages in your config.toml file.\nFor example with current French and English website.\n# English is the default language defaultContentLanguage = \u0026#34;en\u0026#34; # Force to have /en/my-page and /fr/my-page routes, even for default language. defaultContentLanguageInSubdir= true [Languages] [Languages.en] title = \u0026#34;Documentation for Hugo Learn Theme\u0026#34; weight = 1 languageName = \u0026#34;English\u0026#34; [Languages.fr] title = \u0026#34;Documentation du thème Hugo Learn\u0026#34; weight = 2 languageName = \u0026#34;Français\u0026#34; Then, for each new page, append the id of the language to the file.\n Single file my-page.md is split in two files:  in English: my-page.en.md in French: my-page.fr.md   Single file _index.md is split in two files:  in English: _index.en.md in French: _index.fr.md    Be aware that only translated pages are displayed in menu. It\u0026rsquo;s not replaced with default language content.\n Use slug Front Matter parameter to translate urls too.\n Overwrite translation strings Translations strings are used for common default values used in the theme (Edit this page button, Search placeholder and so on). Translations are available in french and english but you may use another language or want to override default values.\nTo override these values, create a new file in your local i18n folder i18n/\u0026lt;idlanguage\u0026gt;.toml and inspire yourself from the theme themes/hugo-theme-learn/i18n/en.toml\nBy the way, as these translations could be used by other people, please take the time to propose a translation by making a PR to the theme !\nDisable language switching Switching the language in the browser is a great feature, but for some reasons you may want to disable it.\nJust set disableLanguageSwitchingButton=true in your config.toml\n[params] # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = true "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/",
	"title": "Skalena API Methodology",
	"tags": [],
	"description": "",
	"content": "Skalena API Methodology We decided to make widespread a big part of our Skalena API Methodology, on this website, you will find out part of our major discovery during many API projects, as well as some goodly contents that shall make you skip directly to the right point when you face an API initiative ahead.\nWe are sharing this on GitHub, anyone can clone it, or even contribute, pull-requests are more than welcome.\nWe do have Instagram account, but to be honest, our hottest channel is for sure our LinkedIn Page, please, follow us there, in order to get updated about our news and insights.\n Topics that will be covered in this doc-site  API First Tooling for API First How ask Customers to define their Orchestrations and Integrations Creating Mocks and Strategies for that Creating Initial Endpoints in some different technologies API Identity: Authentications and Authorizations (OAuth2, JWT etc ) Discussion about Microservices, Macroservices, and why not\u0026hellip; Monolith? The Role of an API Gateway, and the chance of covering some of them The Role of an API Manager, which should be interesting criteria for your evaluation API Audit Scanning and Security  We are a consulting firm based in Brazil very specialized in APIs and digital transformation, we have been working at international projects, ourselves and our partners can work remotely and speak Portuguese, English, and Spanish.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/attachments/",
	"title": "Attachments",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": "The Attachments shortcode displays a list of files attached to a page.\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages\n  If your page is a markdown file, attachements must be place in a folder named like your page and ending with .files.\n  content  _index.md page.files  attachment.pdf   page.md       If your page is a folder, attachements must be place in a nested \u0026lsquo;files\u0026rsquo; folder.\n  content  _index.md page  index.md files  attachment.pdf           Be aware that if you use a multilingual website, you will need to have as many folders as languages.\nThat\u0026rsquo;s all !\nParameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List\u0026rsquo;s title   style \u0026quot;\u0026rdquo; Choose between \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; and \u0026ldquo;green\u0026rdquo; for nice style   pattern \u0026ldquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. The pattern parameter value must be regular expressions.    For example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use *.jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)  Examples List of attachments ending in pdf or mp4 {{%attachments title=\u0026quot;Related files\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}  renders as\n  Related files   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Colored styled box {{%attachments style=\u0026quot;orange\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;grey\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;blue\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;green\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/attachments.fr/",
	"title": "Attachments (Pièces jointes)",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": "Le shortcode Attachments affiche une liste de pièces jointes d\u0026rsquo;une page.\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Utilisation Le shortcode affiche la liste de fichiers trouvés dans un dossier spécifique A l\u0026rsquo;heure actuelle, il supporte deux implémentations\n  Si votre page est un fichier Markdown, les pièces jointes doivent être placée dans un dossier nommé comme le nom de la page et suffixé par .files.\n  content  _index.md page.files  attachment.pdf   page.md       Si votre page est un dossier, les pièces jointes doivent être placées dans un dossier fils \u0026lsquo;files\u0026rsquo;.\n  content  _index.md page  index.md files  attachment.pdf           Attention, si votre site est multi-langue, vous devrez avec autant de dossier qu\u0026rsquo;il y a de langues.\nC\u0026rsquo;est tout !\nParamètres    Paramètre Défaut Description     title \u0026ldquo;Pièces jointes\u0026rdquo; Titre de la liste   style \u0026quot;\u0026rdquo; Choisir entre \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; et \u0026ldquo;green\u0026rdquo; pour un style plus sympa   pattern \u0026ldquo;.*\u0026rdquo; Une expression régulière, utilisée pour filtrer les pièces jointes par leur nom de fichier. Le paramètre pattern doit être une expression régulière.    Par exemple:\n Pour trouver les fichiers avec le suffixe \u0026lsquo;jpg\u0026rsquo;, utilisez *.jpg (pas *.jpg). Pour trouver les fichiers avec les suffixe \u0026lsquo;jpg\u0026rsquo; ou \u0026lsquo;png\u0026rsquo;, utilisez .*(jpg|png)  Exemples Lister les pièces jointes de type pdf ou mp4 {{%attachments title=\u0026quot;Fichiers associés\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}  s\u0026rsquo;affiche comme\n  Fichiers associés   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Modifier le style {{%attachments style=\u0026quot;orange\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;grey\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;blue\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;green\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/button/",
	"title": "Button",
	"tags": [],
	"description": "Nice buttons on your page.",
	"content": "A button is a just a clickable button with optional icon.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Get Grav{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Get Grav with icon{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Get Grav with icon right{{% /button %}}  Get Grav   Get Grav with icon  Get Grav with icon right   "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/button.fr/",
	"title": "Button (Bouton)",
	"tags": [],
	"description": "De beaux boutons sur votre page.",
	"content": "Le shortcode button est simplement un bouton cliquable avec une icône optionnelle.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Téléchargez Grav{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Téléchargez Grav avec icône{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Téléchargez Grav avec icône à droite{{% /button %}}  Téléchargez Grav   Téléchargez Grav avec icône  Téléchargez Grav avec icône à droite   "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/",
	"title": "Children",
	"tags": [],
	"description": "List the child pages of a page",
	"content": "Use the children shortcode to list the child pages of a page and the further descendants (children\u0026rsquo;s children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   style \u0026ldquo;li\u0026rdquo; Choose the style used to display descendants. It could be any HTML tag name   showhidden \u0026ldquo;false\u0026rdquo; When true, child pages hidden from the menu will be displayed   description \u0026ldquo;false\u0026rdquo; Allows you to include a short text under each page in the list.when no description exists for the page, children shortcode takes the first 70 words of your content. read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages. Tips: set 999 to get all descendants   sort none Sort Children ByWeight- to sort on menu orderName- to sort alphabetically on menu labelIdentifier- to sort alphabetically on identifier set in frontmatterURL- URL    Demo {{% children %}}   page 1   page 2   page 3   page test   page test   {{% children description=\u0026quot;true\u0026quot; %}}  "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/expand/",
	"title": "Expand",
	"tags": [],
	"description": "Displays an expandable/collapsible section of text on your page",
	"content": "The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example\n  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is \u0026ldquo;Expand me\u0026hellip;\u0026quot;)\n{{%expand \u0026quot;Is this learn theme rocks ?\u0026quot; %}}Yes !.{{% /expand%}}    Is this learn theme rocks ?   Yes !   Demo {{%expand%}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{% /expand%}}    Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/expand.fr/",
	"title": "Expand",
	"tags": [],
	"description": "Affiche une section de texte qui se plie et se déplie",
	"content": "Le shortcode Expand affiche une section de texte qui se plie et se déplie. Ci-dessous un exemple.\n  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Utilisation Ce shortcode prends exactement un paramètre optionel pour définir le texte à côté de l\u0026rsquo;icone. (valeur par défaut est \u0026ldquo;Déroulez-moi\u0026hellip;\u0026quot;)\n{{%expand \u0026quot;Est-ce que ce thème envoie du pâté ?\u0026quot; %}}Oui !.{{% /expand%}}    Est-ce que ce thème envoie du pâté ?   Oui !   Demo {{%expand%}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{% /expand%}}    Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/mermaid/",
	"title": "Mermaid",
	"tags": [],
	"description": "Generation of diagram and flowchart from text in a similar manner as markdown",
	"content": "Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.\nJust insert your mermaid code in the mermaid shortcode and that\u0026rsquo;s it.\nFlowchart example {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngraph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  or you can use this alternative syntax:\nrenders as\ngraph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] Sequence example {{\u0026lt;mermaid\u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}  renders as\nsequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!  or you can use this alternative syntax:\nrenders as\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! GANTT Example {{\u0026lt;mermaid\u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d  or you can use this alternative syntax:\nrenders as\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d Class example renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label Git example renders as\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/mermaid.fr/",
	"title": "Mermaid",
	"tags": [],
	"description": "Génération de diagrammes à partir de texte, dans le même style que Markdown",
	"content": "Mermaid est une bibliothèque Javascript qui permet de générer des diagrammes (séquence, état, gantt, etc.) à partir de texte, dans le même style que Markdown.\nInsérer votre code Mermaid dans un shortcode mermaid et c\u0026rsquo;est tout.\nFlowchart example {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Bords droits] --\u0026gt;|Lien texte| B(Bords arondis) B --\u0026gt; C{Décision} C --\u0026gt;|Un| D[Résultat un] C --\u0026gt;|Deux| E[Résultat deux] {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngraph LR; A[Bords droits] --|Lien texte| B(Bords arondis) B -- C{Décision} C --|Un| D[Résultat un] C --|Deux| E[Résultat deux]  or you can use this alternative syntax:\nrenders as\ngraph LR; A[Bords droits] --\u0026gt;|Lien texte| B(Bords arondis) B --\u0026gt; C{Décision} C --\u0026gt;|Un| D[Résultat un] C --\u0026gt;|Deux| E[Résultat deux] Sequence example {{\u0026lt;mermaid\u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Salut John, comment vas-tu? loop Vérification John-\u0026gt;John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnelles\u0026lt;br/\u0026gt;prédominent... John--\u0026gt;Alice: Super! John-\u0026gt;Bob: Et toi? Bob--\u0026gt;John: Au top! {{\u0026lt; /mermaid \u0026gt;}}  renders as\nsequenceDiagram participant Alice participant Bob Alice-John: Salut John, comment vas-tu? loop Vérification John-John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnellesprédominent... John--Alice: Super! John-Bob: Et toi? Bob--John: Au top!  or you can use this alternative syntax:\nrenders as\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Salut John, comment vas-tu? loop Vérification John-\u0026gt;John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnelles\u0026lt;br/\u0026gt;prédominent... John--\u0026gt;Alice: Super! John-\u0026gt;Bob: Et toi? Bob--\u0026gt;John: Au top! GANTT Example {{\u0026lt;mermaid\u0026gt;}} gantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d  or you can use this alternative syntax:\nrenders as\ngantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d Class example renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label Git example renders as\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/notice/",
	"title": "Notice",
	"tags": [],
	"description": "Disclaimers to help you structure your page",
	"content": "The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}} A notice disclaimer {{% /notice %}} renders as\nA notice disclaimer\n Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as\nAn information disclaimer\n Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as\nA tip disclaimer\n Warning {{% notice warning %}} A warning disclaimer {{% /notice %}} renders as\nA warning disclaimer\n "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/notice.fr/",
	"title": "Notice",
	"tags": [],
	"description": "Message pour vous aider à structurer votre contenu",
	"content": "Le shortcode Notice permet d\u0026rsquo;afficher 4 types de message pour vous aider à structurer votre contenu.\nNote {{% notice note %}} Une notice de type *note* {{% /notice %}} s\u0026rsquo;affiche comme\nUne notice de type note\n Info {{% notice info %}} Une notice de type *info* {{% /notice %}} s\u0026rsquo;affiche comme\nUne notice de type info\n Tip {{% notice tip %}} Une notice de type *tip* {{% /notice %}} s\u0026rsquo;affiche comme\nUne notice de type tip\n Warning {{% notice warning %}} Une notice de type *warning* {{% /notice %}} s\u0026rsquo;affiche comme\nUne notice de type warning\n "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-1/",
	"title": "page 1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-1/children-1-1/",
	"title": "page 1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-1/children-1-1/children-1-1-1/",
	"title": "page 1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/",
	"title": "page 1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/",
	"title": "page 1-1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-2/",
	"title": "page 2",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-3/",
	"title": "page 3",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-4/",
	"title": "page 4",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/test/",
	"title": "page test",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/test.fr/",
	"title": "page test",
	"tags": [],
	"description": "Ceci est une page test",
	"content": "Ceci est une page de demo\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-2/test3/",
	"title": "page test 3",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test 3 demo child page\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/children/children-2/test3.fr/",
	"title": "page test 3",
	"tags": [],
	"description": "Ceci est une page test",
	"content": "Ceci est une page de demo test 3\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/showcase/",
	"title": "Showcase",
	"tags": [],
	"description": "",
	"content": "TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani "
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/siteparam/",
	"title": "Site param",
	"tags": [],
	"description": "Get value of site params variables in your page.",
	"content": "siteparam shortcode is used to help you print values of site params.\nFor instance, in this current site, the editURL variable is used in config.toml\n[params] editURL = \u0026#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/\u0026#34; Use the siteparam shortcode to display its value.\n`editURL` Value : {{% siteparam \u0026quot;editURL\u0026quot; %}} is displayed as\neditURL Value :\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/shortcodes/siteparam.fr/",
	"title": "Site param",
	"tags": [],
	"description": "Afficher la valeur d&#39;un paramètre global du site dans votre page",
	"content": "Les shortcode siteparam est utilisé pour vous aider à afficher des valeurs provenant des paramètres globaux du site.\nPar exemple, dans ce site, le paramètre editURL est utilisé dans le fichier config.toml\n[params] editURL = \u0026#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/\u0026#34; Utilisez le shortcode siteparam pour affichier sa valeur.\nValeur de `editURL` : {{% siteparam \u0026quot;editURL\u0026quot; %}} s\u0026rsquo;affiche comme\nValeur de editURL :\n"
},
{
	"uri": "https://skalena.github.io/api-methodology/public/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://skalena.github.io/api-methodology/public/vitrine/",
	"title": "Vitrine",
	"tags": [],
	"description": "",
	"content": "TAT par OVH Tshark.dev par Ross Jacobs inteliver by Amir Lavasani "
}]